
V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de4  08009de4  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08009de4  08009de4  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de4  08009de4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  2000018c  08009f78  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  08009f78  00021600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a854  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ff  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003de10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003f178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206c0  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b46  00000000  00000000  00060a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4886  00000000  00000000  0007256e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136df4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  00136e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009d74 	.word	0x08009d74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08009d74 	.word	0x08009d74

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <CDC_On_Receive>:
Received received = {.speed1 = 125, .speed2 = 125, .speed3 = 125, .throwerSpeed = 0,.servospeed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)
volatile float pGain, iGain, dGain = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]

  if (*length == sizeof(Received)) {
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d10c      	bne.n	8000af0 <CDC_On_Receive+0x2c>
	  memcpy(&received, buffer, sizeof(Received));
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <CDC_On_Receive+0x38>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6810      	ldr	r0, [r2, #0]
 8000adc:	6018      	str	r0, [r3, #0]
 8000ade:	8892      	ldrh	r2, [r2, #4]
 8000ae0:	809a      	strh	r2, [r3, #4]

	 if (received.delimiter == 0xAA) { // (9)
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <CDC_On_Receive+0x38>)
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	2baa      	cmp	r3, #170	; 0xaa
 8000ae8:	d102      	bne.n	8000af0 <CDC_On_Receive+0x2c>
		  isCommandReceived = 1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <CDC_On_Receive+0x3c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000000 	.word	0x20000000
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <Set_Motor_Speed>:


void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dd15      	ble.n	8000b42 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b64      	cmp	r3, #100	; 0x64
 8000b1a:	dc0b      	bgt.n	8000b34 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e002      	b.n	8000b3a <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000b40:	e020      	b.n	8000b84 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da17      	bge.n	8000b78 <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b4e:	db0a      	blt.n	8000b66 <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <Set_Motor_Speed+0x8c>)
 8000b54:	fb02 f303 	mul.w	r3, r2, r3
 8000b58:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000b5c:	3320      	adds	r3, #32
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e004      	b.n	8000b70 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	425b      	negs	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e005      	b.n	8000b84 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	fffffe3e 	.word	0xfffffe3e

08000b94 <PID2>:


int PID2(uint8_t enc, uint8_t setpoint){
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]


	enc = 250 - enc;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000baa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000bae:	33fa      	adds	r3, #250	; 0xfa
 8000bb0:	71fb      	strb	r3, [r7, #7]

	float P = 0.4;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <PID2+0xc8>)
 8000bb4:	61bb      	str	r3, [r7, #24]
	float I = 0.00001;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <PID2+0xcc>)
 8000bb8:	617b      	str	r3, [r7, #20]
	float D = 0;
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]

	static long integral = 0;

	if(setpoint == 0){
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <PID2+0x3c>
		integral = 0;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <PID2+0xd0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
		return 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e03f      	b.n	8000c50 <PID2+0xbc>
	}


	//CDC_Transmit_FS(&enc, sizeof(enc));

	float error = setpoint - enc;
 8000bd0:	79ba      	ldrb	r2, [r7, #6]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bde:	edc7 7a03 	vstr	s15, [r7, #12]

	integral += error;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <PID2+0xd0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfa:	ee17 2a90 	vmov	r2, s15
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <PID2+0xd0>)
 8000c00:	601a      	str	r2, [r3, #0]

	int out = 50 + P*error + I*integral;
 8000c02:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000c68 <PID2+0xd4>
 8000c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <PID2+0xd0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	ee17 3a90 	vmov	r3, s15
 8000c36:	61fb      	str	r3, [r7, #28]

	if(out < 0){
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	da01      	bge.n	8000c42 <PID2+0xae>
		out = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
	}


	if(out > 100) out = 100;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2b64      	cmp	r3, #100	; 0x64
 8000c46:	dd01      	ble.n	8000c4c <PID2+0xb8>
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	61fb      	str	r3, [r7, #28]

	//CDC_Transmit_FS(&out, sizeof(out));
	return (uint8_t)out;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3724      	adds	r7, #36	; 0x24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	3ecccccd 	.word	0x3ecccccd
 8000c60:	3727c5ac 	.word	0x3727c5ac
 8000c64:	200001ac 	.word	0x200001ac
 8000c68:	42480000 	.word	0x42480000
 8000c6c:	00000000 	.word	0x00000000

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b090      	sub	sp, #64	; 0x40
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 ffa2 	bl	8001bbe <HAL_Init>

  /* USER CODE BEGIN Init */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c7a:	4ba9      	ldr	r3, [pc, #676]	; (8000f20 <main+0x2b0>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4aa8      	ldr	r2, [pc, #672]	; (8000f20 <main+0x2b0>)
 8000c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c84:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000c86:	4ba7      	ldr	r3, [pc, #668]	; (8000f24 <main+0x2b4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c8c:	4ba5      	ldr	r3, [pc, #660]	; (8000f24 <main+0x2b4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4aa4      	ldr	r2, [pc, #656]	; (8000f24 <main+0x2b4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]

    unsigned long esctimer = DWT->CYCCNT;
 8000c98:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <main+0x2b4>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    unsigned long servotimer = DWT->CYCCNT;
 8000c9e:	4ba1      	ldr	r3, [pc, #644]	; (8000f24 <main+0x2b4>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 faa4 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 fd60 	bl	800176c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cac:	f000 fb08 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cb0:	f000 fbc4 	bl	800143c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cb4:	f000 fc46 	bl	8001544 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cb8:	f000 fcc8 	bl	800164c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000cbc:	f000 fd30 	bl	8001720 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000cc0:	f008 fb5a 	bl	8009378 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4898      	ldr	r0, [pc, #608]	; (8000f28 <main+0x2b8>)
 8000cc8:	f003 fe90 	bl	80049ec <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4896      	ldr	r0, [pc, #600]	; (8000f28 <main+0x2b8>)
 8000cd0:	f003 fe8c 	bl	80049ec <HAL_TIM_PWM_Start>
  	TIM1->CCR1 = 0;
 8000cd4:	4b95      	ldr	r3, [pc, #596]	; (8000f2c <main+0x2bc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM1->CCR2 = 0;
 8000cda:	4b94      	ldr	r3, [pc, #592]	; (8000f2c <main+0x2bc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38


  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4893      	ldr	r0, [pc, #588]	; (8000f30 <main+0x2c0>)
 8000ce4:	f003 fe82 	bl	80049ec <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4891      	ldr	r0, [pc, #580]	; (8000f30 <main+0x2c0>)
 8000cec:	f003 fe7e 	bl	80049ec <HAL_TIM_PWM_Start>
  	TIM3->CCR1 = 0;
 8000cf0:	4b90      	ldr	r3, [pc, #576]	; (8000f34 <main+0x2c4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM3->CCR2 = 0;
 8000cf6:	4b8f      	ldr	r3, [pc, #572]	; (8000f34 <main+0x2c4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38


  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	488e      	ldr	r0, [pc, #568]	; (8000f38 <main+0x2c8>)
 8000d00:	f003 fe74 	bl	80049ec <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000d04:	2104      	movs	r1, #4
 8000d06:	488c      	ldr	r0, [pc, #560]	; (8000f38 <main+0x2c8>)
 8000d08:	f003 fe70 	bl	80049ec <HAL_TIM_PWM_Start>
  	TIM4->CCR1 = 0;
 8000d0c:	4b8b      	ldr	r3, [pc, #556]	; (8000f3c <main+0x2cc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM4->CCR2 = 0;
 8000d12:	4b8a      	ldr	r3, [pc, #552]	; (8000f3c <main+0x2cc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int ENC2 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int prev_ENC2 = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned long ENCA_S = DWT->CYCCNT;
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <main+0x2b4>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long ENCA_D;
	uint8_t ENCA_P = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	unsigned long ENCA_S1 = DWT->CYCCNT;
 8000d2c:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <main+0x2b4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	61fb      	str	r3, [r7, #28]
	unsigned long ENCA_D1;
	uint8_t ENCA_P3 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	76fb      	strb	r3, [r7, #27]

	unsigned long ENCA_S3 = DWT->CYCCNT;
 8000d36:	4b7b      	ldr	r3, [pc, #492]	; (8000f24 <main+0x2b4>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	617b      	str	r3, [r7, #20]
	unsigned long ENCA_D3;
	uint8_t ENCA_P2 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	74fb      	strb	r3, [r7, #19]
  while (1)
  {


	  //ESC
	  if((DWT->CYCCNT - esctimer)/96000 > 20){
 8000d40:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <main+0x2b4>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	4a7d      	ldr	r2, [pc, #500]	; (8000f40 <main+0x2d0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d938      	bls.n	8000dc0 <main+0x150>
		  esctimer = DWT->CYCCNT;
 8000d4e:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <main+0x2b4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
		  HAL_GPIO_WritePin(ESCPWM_GPIO_Port, ESCPWM_Pin,1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5c:	f001 fa4a 	bl	80021f4 <HAL_GPIO_WritePin>
		  while((DWT->CYCCNT - esctimer) / 96 < (received.throwerSpeed*3.92+1000));
 8000d60:	bf00      	nop
 8000d62:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <main+0x2b4>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	4a76      	ldr	r2, [pc, #472]	; (8000f44 <main+0x2d4>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fb92 	bl	800049c <__aeabi_ui2d>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4b72      	ldr	r3, [pc, #456]	; (8000f48 <main+0x2d8>)
 8000d7e:	78db      	ldrb	r3, [r3, #3]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb9b 	bl	80004bc <__aeabi_i2d>
 8000d86:	a364      	add	r3, pc, #400	; (adr r3, 8000f18 <main+0x2a8>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fc00 	bl	8000590 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <main+0x2dc>)
 8000d9e:	f7ff fa41 	bl	8000224 <__adddf3>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f7ff fe63 	bl	8000a74 <__aeabi_dcmplt>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1d6      	bne.n	8000d62 <main+0xf2>
		  HAL_GPIO_WritePin(ESCPWM_GPIO_Port, ESCPWM_Pin,0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2120      	movs	r1, #32
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fa1a 	bl	80021f4 <HAL_GPIO_WritePin>
	  }



	  //SERVO
	  if((DWT->CYCCNT - servotimer)/96000 > 2){
 8000dc0:	4b58      	ldr	r3, [pc, #352]	; (8000f24 <main+0x2b4>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	4a61      	ldr	r2, [pc, #388]	; (8000f50 <main+0x2e0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d923      	bls.n	8000e16 <main+0x1a6>
		  servotimer = DWT->CYCCNT;
 8000dce:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <main+0x2b4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
		  HAL_GPIO_WritePin(SERVOPWM_GPIO_Port, SERVOPWM_Pin,1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f001 fa09 	bl	80021f4 <HAL_GPIO_WritePin>
		  while((DWT->CYCCNT - servotimer) / 96 < (received.servospeed*23));
 8000de2:	bf00      	nop
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <main+0x2b4>)
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <main+0x2d4>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0999      	lsrs	r1, r3, #6
 8000df4:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <main+0x2d8>)
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d3ed      	bcc.n	8000de4 <main+0x174>
		  HAL_GPIO_WritePin(SERVOPWM_GPIO_Port, SERVOPWM_Pin,0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 f9ef 	bl	80021f4 <HAL_GPIO_WritePin>





	  	  unsigned long while_timeout = DWT->CYCCNT;
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <main+0x2b4>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]
	  	  int timeout_flag = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){  // ootab kuni läheb madalaks
 8000e20:	e009      	b.n	8000e36 <main+0x1c6>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <main+0x2b4>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a4a      	ldr	r2, [pc, #296]	; (8000f54 <main+0x2e4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d902      	bls.n	8000e36 <main+0x1c6>
				  timeout_flag = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000e34:	e007      	b.n	8000e46 <main+0x1d6>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){  // ootab kuni läheb madalaks
 8000e36:	2101      	movs	r1, #1
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 f9c2 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d0ed      	beq.n	8000e22 <main+0x1b2>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <main+0x2b4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60fb      	str	r3, [r7, #12]
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000e4c:	e009      	b.n	8000e62 <main+0x1f2>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <main+0x2b4>)
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <main+0x2e4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d902      	bls.n	8000e62 <main+0x1f2>
				  timeout_flag = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000e60:	e007      	b.n	8000e72 <main+0x202>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000e62:	2101      	movs	r1, #1
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f001 f9ac 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0ed      	beq.n	8000e4e <main+0x1de>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <main+0x2b4>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
		  ENCA_S = DWT->CYCCNT;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <main+0x2b4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){ // ootab kuni läheb madalaks
 8000e7e:	e009      	b.n	8000e94 <main+0x224>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <main+0x2b4>)
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4a32      	ldr	r2, [pc, #200]	; (8000f54 <main+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d902      	bls.n	8000e94 <main+0x224>
				  timeout_flag = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000e92:	e007      	b.n	8000ea4 <main+0x234>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){ // ootab kuni läheb madalaks
 8000e94:	2101      	movs	r1, #1
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f001 f993 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d0ed      	beq.n	8000e80 <main+0x210>
			  }
		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <main+0x2b4>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	4a2a      	ldr	r2, [pc, #168]	; (8000f58 <main+0x2e8>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	09db      	lsrs	r3, r3, #7
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	2bf9      	cmp	r3, #249	; 0xf9
 8000eba:	d802      	bhi.n	8000ec2 <main+0x252>
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <main+0x256>
 8000ec2:	23f9      	movs	r3, #249	; 0xf9
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
		  ENCA_P = (uint8_t)ENCA_D;
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		  while_timeout = DWT->CYCCNT;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <main+0x2b4>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]
		  timeout_flag = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){  // ootab kuni läheb madalaks
 8000ed6:	e009      	b.n	8000eec <main+0x27c>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <main+0x2b4>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <main+0x2e4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d902      	bls.n	8000eec <main+0x27c>
				  timeout_flag = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000eea:	e007      	b.n	8000efc <main+0x28c>
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){  // ootab kuni läheb madalaks
 8000eec:	2104      	movs	r1, #4
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f001 f967 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d0ed      	beq.n	8000ed8 <main+0x268>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <main+0x2b4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	60fb      	str	r3, [r7, #12]
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000f02:	e02b      	b.n	8000f5c <main+0x2ec>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <main+0x2b4>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <main+0x2e4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d924      	bls.n	8000f5c <main+0x2ec>
				  timeout_flag = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000f16:	e029      	b.n	8000f6c <main+0x2fc>
 8000f18:	f5c28f5c 	.word	0xf5c28f5c
 8000f1c:	400f5c28 	.word	0x400f5c28
 8000f20:	e000edf0 	.word	0xe000edf0
 8000f24:	e0001000 	.word	0xe0001000
 8000f28:	2000053c 	.word	0x2000053c
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	200004d0 	.word	0x200004d0
 8000f34:	40000400 	.word	0x40000400
 8000f38:	20000468 	.word	0x20000468
 8000f3c:	40000800 	.word	0x40000800
 8000f40:	001ec2ff 	.word	0x001ec2ff
 8000f44:	aaaaaaab 	.word	0xaaaaaaab
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	408f4000 	.word	0x408f4000
 8000f50:	000464ff 	.word	0x000464ff
 8000f54:	0007a11f 	.word	0x0007a11f
 8000f58:	10624dd3 	.word	0x10624dd3
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f001 f92f 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0cb      	beq.n	8000f04 <main+0x294>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000f6c:	4b95      	ldr	r3, [pc, #596]	; (80011c4 <main+0x554>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	60fb      	str	r3, [r7, #12]
		  ENCA_S = DWT->CYCCNT;
 8000f72:	4b94      	ldr	r3, [pc, #592]	; (80011c4 <main+0x554>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){ // ootab kuni läheb madalaks
 8000f78:	e009      	b.n	8000f8e <main+0x31e>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000f7a:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <main+0x554>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	4a91      	ldr	r2, [pc, #580]	; (80011c8 <main+0x558>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d902      	bls.n	8000f8e <main+0x31e>
				  timeout_flag = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
				  break;
 8000f8c:	e007      	b.n	8000f9e <main+0x32e>
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){ // ootab kuni läheb madalaks
 8000f8e:	2104      	movs	r1, #4
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 f916 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d0ed      	beq.n	8000f7a <main+0x30a>
			  }
		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 8000f9e:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <main+0x554>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	4a89      	ldr	r2, [pc, #548]	; (80011cc <main+0x55c>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	09db      	lsrs	r3, r3, #7
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	2bf9      	cmp	r3, #249	; 0xf9
 8000fb4:	d802      	bhi.n	8000fbc <main+0x34c>
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <main+0x350>
 8000fbc:	23f9      	movs	r3, #249	; 0xf9
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
		  ENCA_P3 = (uint8_t)ENCA_D;
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc2:	76fb      	strb	r3, [r7, #27]





		  while_timeout = DWT->CYCCNT;
 8000fc4:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <main+0x554>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]
  	  	  timeout_flag = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){  // ootab kuni läheb madalaks
 8000fce:	e009      	b.n	8000fe4 <main+0x374>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000fd0:	4b7c      	ldr	r3, [pc, #496]	; (80011c4 <main+0x554>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a7b      	ldr	r2, [pc, #492]	; (80011c8 <main+0x558>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d902      	bls.n	8000fe4 <main+0x374>
  				  timeout_flag = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  				  break;
 8000fe2:	e006      	b.n	8000ff2 <main+0x382>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){  // ootab kuni läheb madalaks
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	487a      	ldr	r0, [pc, #488]	; (80011d0 <main+0x560>)
 8000fe8:	f001 f8ec 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d0ee      	beq.n	8000fd0 <main+0x360>
  			  }
  		  }
  		  while_timeout = DWT->CYCCNT;
 8000ff2:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <main+0x554>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000ff8:	e009      	b.n	800100e <main+0x39e>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000ffa:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <main+0x554>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a71      	ldr	r2, [pc, #452]	; (80011c8 <main+0x558>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d902      	bls.n	800100e <main+0x39e>
  				  timeout_flag = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  				  break;
 800100c:	e006      	b.n	800101c <main+0x3ac>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 0){ //ootab kuni läheb kõrgeks
 800100e:	2102      	movs	r1, #2
 8001010:	486f      	ldr	r0, [pc, #444]	; (80011d0 <main+0x560>)
 8001012:	f001 f8d7 	bl	80021c4 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ee      	beq.n	8000ffa <main+0x38a>
  			  }
  		  }
  		  while_timeout = DWT->CYCCNT;
 800101c:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <main+0x554>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
  		  ENCA_S = DWT->CYCCNT;
 8001022:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <main+0x554>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){ // ootab kuni läheb madalaks
 8001028:	e009      	b.n	800103e <main+0x3ce>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <main+0x554>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <main+0x558>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d902      	bls.n	800103e <main+0x3ce>
  				  timeout_flag = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  				  break;
 800103c:	e006      	b.n	800104c <main+0x3dc>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){ // ootab kuni läheb madalaks
 800103e:	2102      	movs	r1, #2
 8001040:	4863      	ldr	r0, [pc, #396]	; (80011d0 <main+0x560>)
 8001042:	f001 f8bf 	bl	80021c4 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d0ee      	beq.n	800102a <main+0x3ba>
  			  }
  		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 800104c:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <main+0x554>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <main+0x55c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	09db      	lsrs	r3, r3, #7
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	2bf9      	cmp	r3, #249	; 0xf9
 8001062:	d802      	bhi.n	800106a <main+0x3fa>
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <main+0x3fe>
 800106a:	23f9      	movs	r3, #249	; 0xf9
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
		  ENCA_P2 = (uint8_t)ENCA_D;
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	74fb      	strb	r3, [r7, #19]





		if(received.speed1 > 125){
 8001072:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <main+0x564>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b7d      	cmp	r3, #125	; 0x7d
 8001078:	d913      	bls.n	80010a2 <main+0x432>
			uint8_t pi1d = PID2(ENCA_P3, (received.speed1 - 125)*2);
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <main+0x564>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3303      	adds	r3, #3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	7efb      	ldrb	r3, [r7, #27]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fd82 	bl	8000b94 <PID2>
 8001090:	4603      	mov	r3, r0
 8001092:	72bb      	strb	r3, [r7, #10]
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), pi1d);
 8001094:	7abb      	ldrb	r3, [r7, #10]
 8001096:	461a      	mov	r2, r3
 8001098:	494f      	ldr	r1, [pc, #316]	; (80011d8 <main+0x568>)
 800109a:	4850      	ldr	r0, [pc, #320]	; (80011dc <main+0x56c>)
 800109c:	f7ff fd32 	bl	8000b04 <Set_Motor_Speed>
 80010a0:	e01e      	b.n	80010e0 <main+0x470>
		}
		else if(received.speed1 < 125){
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <main+0x564>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b7c      	cmp	r3, #124	; 0x7c
 80010a8:	d815      	bhi.n	80010d6 <main+0x466>
			uint8_t pi1d = PID2(ENCA_P3, 250 - (received.speed1*2));
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <main+0x564>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7efb      	ldrb	r3, [r7, #27]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd69 	bl	8000b94 <PID2>
 80010c2:	4603      	mov	r3, r0
 80010c4:	72fb      	strb	r3, [r7, #11]
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), pi1d*-1);
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	425b      	negs	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4942      	ldr	r1, [pc, #264]	; (80011d8 <main+0x568>)
 80010ce:	4843      	ldr	r0, [pc, #268]	; (80011dc <main+0x56c>)
 80010d0:	f7ff fd18 	bl	8000b04 <Set_Motor_Speed>
 80010d4:	e004      	b.n	80010e0 <main+0x470>
		}
		else{
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	493f      	ldr	r1, [pc, #252]	; (80011d8 <main+0x568>)
 80010da:	4840      	ldr	r0, [pc, #256]	; (80011dc <main+0x56c>)
 80010dc:	f7ff fd12 	bl	8000b04 <Set_Motor_Speed>
		}



		if(received.speed2 > 125){
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <main+0x564>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	2b7d      	cmp	r3, #125	; 0x7d
 80010e6:	d914      	bls.n	8001112 <main+0x4a2>
			uint8_t pi2d = PID2(ENCA_P, (received.speed2 - 125)*2);
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <main+0x564>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	3303      	adds	r3, #3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd4a 	bl	8000b94 <PID2>
 8001100:	4603      	mov	r3, r0
 8001102:	723b      	strb	r3, [r7, #8]
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), pi2d);
 8001104:	7a3b      	ldrb	r3, [r7, #8]
 8001106:	461a      	mov	r2, r3
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <main+0x570>)
 800110a:	4836      	ldr	r0, [pc, #216]	; (80011e4 <main+0x574>)
 800110c:	f7ff fcfa 	bl	8000b04 <Set_Motor_Speed>
 8001110:	e01f      	b.n	8001152 <main+0x4e2>
		}
		else if(received.speed2 < 125){
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <main+0x564>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	2b7c      	cmp	r3, #124	; 0x7c
 8001118:	d816      	bhi.n	8001148 <main+0x4d8>
			uint8_t pi2d = PID2(ENCA_P, 250 - (received.speed2*2));
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <main+0x564>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8001122:	b2db      	uxtb	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd30 	bl	8000b94 <PID2>
 8001134:	4603      	mov	r3, r0
 8001136:	727b      	strb	r3, [r7, #9]
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), pi2d*-1);
 8001138:	7a7b      	ldrb	r3, [r7, #9]
 800113a:	425b      	negs	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4928      	ldr	r1, [pc, #160]	; (80011e0 <main+0x570>)
 8001140:	4828      	ldr	r0, [pc, #160]	; (80011e4 <main+0x574>)
 8001142:	f7ff fcdf 	bl	8000b04 <Set_Motor_Speed>
 8001146:	e004      	b.n	8001152 <main+0x4e2>
		}
		else{
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), 0);
 8001148:	2200      	movs	r2, #0
 800114a:	4925      	ldr	r1, [pc, #148]	; (80011e0 <main+0x570>)
 800114c:	4825      	ldr	r0, [pc, #148]	; (80011e4 <main+0x574>)
 800114e:	f7ff fcd9 	bl	8000b04 <Set_Motor_Speed>





		if(received.speed3 > 125){
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <main+0x564>)
 8001154:	789b      	ldrb	r3, [r3, #2]
 8001156:	2b7d      	cmp	r3, #125	; 0x7d
 8001158:	d913      	bls.n	8001182 <main+0x512>
			uint8_t pi3d = PID2(ENCA_P2, (received.speed3 - 125)*2);
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <main+0x564>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	3303      	adds	r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	7cfb      	ldrb	r3, [r7, #19]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd12 	bl	8000b94 <PID2>
 8001170:	4603      	mov	r3, r0
 8001172:	71bb      	strb	r3, [r7, #6]
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), pi3d);
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	461a      	mov	r2, r3
 8001178:	491b      	ldr	r1, [pc, #108]	; (80011e8 <main+0x578>)
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <main+0x57c>)
 800117c:	f7ff fcc2 	bl	8000b04 <Set_Motor_Speed>
 8001180:	e5de      	b.n	8000d40 <main+0xd0>
		}
		else if(received.speed3 < 125){
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <main+0x564>)
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	2b7c      	cmp	r3, #124	; 0x7c
 8001188:	d815      	bhi.n	80011b6 <main+0x546>
			uint8_t pi3d = PID2(ENCA_P2, 250 - (received.speed3*2));
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <main+0x564>)
 800118c:	789b      	ldrb	r3, [r3, #2]
 800118e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8001192:	b2db      	uxtb	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	7cfb      	ldrb	r3, [r7, #19]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fcf9 	bl	8000b94 <PID2>
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), pi3d*-1);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	425b      	negs	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	490e      	ldr	r1, [pc, #56]	; (80011e8 <main+0x578>)
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <main+0x57c>)
 80011b0:	f7ff fca8 	bl	8000b04 <Set_Motor_Speed>
 80011b4:	e5c4      	b.n	8000d40 <main+0xd0>
		}
		else{
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	490b      	ldr	r1, [pc, #44]	; (80011e8 <main+0x578>)
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <main+0x57c>)
 80011bc:	f7ff fca2 	bl	8000b04 <Set_Motor_Speed>
  {
 80011c0:	e5be      	b.n	8000d40 <main+0xd0>
 80011c2:	bf00      	nop
 80011c4:	e0001000 	.word	0xe0001000
 80011c8:	0007a11f 	.word	0x0007a11f
 80011cc:	10624dd3 	.word	0x10624dd3
 80011d0:	48001400 	.word	0x48001400
 80011d4:	20000000 	.word	0x20000000
 80011d8:	40000838 	.word	0x40000838
 80011dc:	40000834 	.word	0x40000834
 80011e0:	40012c38 	.word	0x40012c38
 80011e4:	40012c34 	.word	0x40012c34
 80011e8:	40000438 	.word	0x40000438
 80011ec:	40000434 	.word	0x40000434

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0a4      	sub	sp, #144	; 0x90
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fa:	2238      	movs	r2, #56	; 0x38
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f008 fdb0 	bl	8009d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2244      	movs	r2, #68	; 0x44
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fda2 	bl	8009d64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001224:	f002 fb8a 	bl	800393c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800123e:	2301      	movs	r3, #1
 8001240:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001242:	230c      	movs	r3, #12
 8001244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800124e:	2304      	movs	r3, #4
 8001250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fc20 	bl	8003aa4 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800126a:	f000 fb05 	bl	8001878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001282:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001286:	2102      	movs	r1, #2
 8001288:	4618      	mov	r0, r3
 800128a:	f002 ff23 	bl	80040d4 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001294:	f000 faf0 	bl	8001878 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800129e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f8f8 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012b2:	f000 fae1 	bl	8001878 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3790      	adds	r7, #144	; 0x90
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09c      	sub	sp, #112	; 0x70
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2234      	movs	r2, #52	; 0x34
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f008 fd32 	bl	8009d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <MX_TIM1_Init+0x174>)
 8001302:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <MX_TIM1_Init+0x178>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001306:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <MX_TIM1_Init+0x174>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <MX_TIM1_Init+0x174>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <MX_TIM1_Init+0x174>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <MX_TIM1_Init+0x174>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <MX_TIM1_Init+0x174>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <MX_TIM1_Init+0x174>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132c:	4841      	ldr	r0, [pc, #260]	; (8001434 <MX_TIM1_Init+0x174>)
 800132e:	f003 faa5 	bl	800487c <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 fa9e 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001342:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001346:	4619      	mov	r1, r3
 8001348:	483a      	ldr	r0, [pc, #232]	; (8001434 <MX_TIM1_Init+0x174>)
 800134a:	f003 fd5f 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001354:	f000 fa90 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001358:	4836      	ldr	r0, [pc, #216]	; (8001434 <MX_TIM1_Init+0x174>)
 800135a:	f003 fae6 	bl	800492a <HAL_TIM_PWM_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001364:	f000 fa88 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001378:	4619      	mov	r1, r3
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <MX_TIM1_Init+0x174>)
 800137c:	f004 fa60 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001386:	f000 fa77 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4821      	ldr	r0, [pc, #132]	; (8001434 <MX_TIM1_Init+0x174>)
 80013b0:	f003 fc1c 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013ba:	f000 fa5d 	bl	8001878 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c6:	2204      	movs	r2, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	481a      	ldr	r0, [pc, #104]	; (8001434 <MX_TIM1_Init+0x174>)
 80013cc:	f003 fc0e 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80013d6:	f000 fa4f 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM1_Init+0x174>)
 8001418:	f004 fa94 	bl	8005944 <HAL_TIMEx_ConfigBreakDeadTime>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8001422:	f000 fa29 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM1_Init+0x174>)
 8001428:	f000 fac2 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3770      	adds	r7, #112	; 0x70
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000053c 	.word	0x2000053c
 8001438:	40012c00 	.word	0x40012c00

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <MX_TIM3_Init+0x100>)
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <MX_TIM3_Init+0x104>)
 8001472:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <MX_TIM3_Init+0x100>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <MX_TIM3_Init+0x100>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <MX_TIM3_Init+0x100>)
 8001482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM3_Init+0x100>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_TIM3_Init+0x100>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <MX_TIM3_Init+0x100>)
 8001496:	f003 f9f1 	bl	800487c <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014a0:	f000 f9ea 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <MX_TIM3_Init+0x100>)
 80014b2:	f003 fcab 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014bc:	f000 f9dc 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c0:	481e      	ldr	r0, [pc, #120]	; (800153c <MX_TIM3_Init+0x100>)
 80014c2:	f003 fa32 	bl	800492a <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014cc:	f000 f9d4 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <MX_TIM3_Init+0x100>)
 80014e0:	f004 f9ae 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014ea:	f000 f9c5 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM3_Init+0x100>)
 8001506:	f003 fb71 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001510:	f000 f9b2 	bl	8001878 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	2204      	movs	r2, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM3_Init+0x100>)
 8001520:	f003 fb64 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800152a:	f000 f9a5 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM3_Init+0x100>)
 8001530:	f000 fa3e 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200004d0 	.word	0x200004d0
 8001540:	40000400 	.word	0x40000400

08001544 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <MX_TIM4_Init+0x100>)
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <MX_TIM4_Init+0x104>)
 800157a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_TIM4_Init+0x100>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_TIM4_Init+0x100>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_TIM4_Init+0x100>)
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_TIM4_Init+0x100>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_TIM4_Init+0x100>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800159c:	4829      	ldr	r0, [pc, #164]	; (8001644 <MX_TIM4_Init+0x100>)
 800159e:	f003 f96d 	bl	800487c <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80015a8:	f000 f966 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <MX_TIM4_Init+0x100>)
 80015ba:	f003 fc27 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80015c4:	f000 f958 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015c8:	481e      	ldr	r0, [pc, #120]	; (8001644 <MX_TIM4_Init+0x100>)
 80015ca:	f003 f9ae 	bl	800492a <HAL_TIM_PWM_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80015d4:	f000 f950 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_TIM4_Init+0x100>)
 80015e8:	f004 f92a 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015f2:	f000 f941 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f6:	2360      	movs	r3, #96	; 0x60
 80015f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM4_Init+0x100>)
 800160e:	f003 faed 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001618:	f000 f92e 	bl	8001878 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2204      	movs	r2, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM4_Init+0x100>)
 8001628:	f003 fae0 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001632:	f000 f921 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM4_Init+0x100>)
 8001638:	f000 f9ba 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000468 	.word	0x20000468
 8001648:	40000800 	.word	0x40000800

0800164c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2234      	movs	r2, #52	; 0x34
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fb76 	bl	8009d64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <MX_TIM8_Init+0xcc>)
 800167a:	4a28      	ldr	r2, [pc, #160]	; (800171c <MX_TIM8_Init+0xd0>)
 800167c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_TIM8_Init+0xcc>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <MX_TIM8_Init+0xcc>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_TIM8_Init+0xcc>)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_TIM8_Init+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_TIM8_Init+0xcc>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_TIM8_Init+0xcc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_TIM8_Init+0xcc>)
 80016a6:	f003 f8e9 	bl	800487c <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80016b0:	f000 f8e2 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016be:	4619      	mov	r1, r3
 80016c0:	4815      	ldr	r0, [pc, #84]	; (8001718 <MX_TIM8_Init+0xcc>)
 80016c2:	f003 fba3 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80016cc:	f000 f8d4 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_TIM8_Init+0xcc>)
 80016e4:	f004 f8ac 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016ee:	f000 f8c3 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_TIM8_Init+0xcc>)
 8001700:	f004 f920 	bl	8005944 <HAL_TIMEx_ConfigBreakDeadTime>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800170a:	f000 f8b5 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	; 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000041c 	.word	0x2000041c
 800171c:	40013400 	.word	0x40013400

08001720 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_TIM16_Init+0x44>)
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <MX_TIM16_Init+0x48>)
 8001728:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_TIM16_Init+0x44>)
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_TIM16_Init+0x44>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_TIM16_Init+0x44>)
 8001738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_TIM16_Init+0x44>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_TIM16_Init+0x44>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_TIM16_Init+0x44>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_TIM16_Init+0x44>)
 8001752:	f003 f893 	bl	800487c <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800175c:	f000 f88c 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000061c 	.word	0x2000061c
 8001768:	40014400 	.word	0x40014400

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <MX_GPIO_Init+0x100>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a39      	ldr	r2, [pc, #228]	; (800186c <MX_GPIO_Init+0x100>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <MX_GPIO_Init+0x100>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <MX_GPIO_Init+0x100>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a33      	ldr	r2, [pc, #204]	; (800186c <MX_GPIO_Init+0x100>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <MX_GPIO_Init+0x100>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <MX_GPIO_Init+0x100>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <MX_GPIO_Init+0x100>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MX_GPIO_Init+0x100>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ESCPWM_Pin|SERVOPWM_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f248 0120 	movw	r1, #32800	; 0x8020
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f000 fd0e 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC3A_Pin */
  GPIO_InitStruct.Pin = ENC3A_Pin;
 80017d8:	2302      	movs	r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC3A_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <MX_GPIO_Init+0x104>)
 80017ec:	f000 fb68 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1A_Pin;
 80017f0:	2305      	movs	r3, #5
 80017f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f000 fb5b 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1B_Pin ENC3B_Pin */
  GPIO_InitStruct.Pin = ENC1B_Pin|ENC3B_Pin;
 800180a:	2318      	movs	r3, #24
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <MX_GPIO_Init+0x108>)
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f000 fb4e 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESCPWM_Pin SERVOPWM_Pin */
  GPIO_InitStruct.Pin = ESCPWM_Pin|SERVOPWM_Pin;
 8001824:	f248 0320 	movw	r3, #32800	; 0x8020
 8001828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f000 fb3e 	bl	8001ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	2009      	movs	r0, #9
 800184a:	f000 fb04 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800184e:	2009      	movs	r0, #9
 8001850:	f000 fb1b 	bl	8001e8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	200a      	movs	r0, #10
 800185a:	f000 fafc 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800185e:	200a      	movs	r0, #10
 8001860:	f000 fb13 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	48001400 	.word	0x48001400
 8001874:	10110000 	.word	0x10110000

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6613      	str	r3, [r2, #96]	; 0x60
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_MspInit+0x44>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018be:	f002 f8e1 	bl	8003a84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2e      	ldr	r2, [pc, #184]	; (8001998 <HAL_TIM_Base_MspInit+0xc8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10c      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 80018e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ec:	6613      	str	r3, [r2, #96]	; 0x60
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80018fa:	e046      	b.n	800198a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10c      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
}
 800191e:	e034      	b.n	800198a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10c      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
}
 8001942:	e022      	b.n	800198a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10c      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
}
 8001966:	e010      	b.n	800198a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM16)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_TIM_Base_MspInit+0xdc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d10b      	bne.n	800198a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	6613      	str	r3, [r2, #96]	; 0x60
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_TIM_Base_MspInit+0xcc>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
}
 800198a:	bf00      	nop
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40012c00 	.word	0x40012c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40000800 	.word	0x40000800
 80019a8:	40013400 	.word	0x40013400
 80019ac:	40014400 	.word	0x40014400

080019b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <HAL_TIM_MspPostInit+0xf0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d11e      	bne.n	8001a10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM1_Pin|M2_PWM2_Pin;
 80019ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019fc:	2306      	movs	r3, #6
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f000 fa59 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a0e:	e043      	b.n	8001a98 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <HAL_TIM_MspPostInit+0xf8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11d      	bne.n	8001a56 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM1_Pin|M1_PWM2_Pin;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a42:	2302      	movs	r3, #2
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f000 fa36 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001a54:	e020      	b.n	8001a98 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_TIM_MspPostInit+0xfc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d11b      	bne.n	8001a98 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_TIM_MspPostInit+0xf4>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM1_Pin|M3_PWM2_Pin;
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <HAL_TIM_MspPostInit+0x100>)
 8001a94:	f000 fa14 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f8ac 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b14:	2008      	movs	r0, #8
 8001b16:	f000 fb85 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b22:	2010      	movs	r0, #16
 8001b24:	f000 fb7e 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <USB_LP_IRQHandler+0x10>)
 8001b32:	f000 fca1 	bl	8002478 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000130c 	.word	0x2000130c

08001b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <SystemInit+0x28>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <SystemInit+0x28>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SystemInit+0x28>)
 8001b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b96:	f7ff ffd3 	bl	8001b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f008 f8bf 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9e:	f7ff f867 	bl	8000c70 <main>

08001ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   r0, =_estack
 8001ba4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001bb0:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 8001bb4:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001bb8:	20001600 	.word	0x20001600

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>

08001bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f939 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f80e 	bl	8001bf0 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	e001      	b.n	8001be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be0:	f7ff fe52 	bl	8001888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be4:	79fb      	ldrb	r3, [r7, #7]

}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_InitTick+0x68>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d022      	beq.n	8001c4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_InitTick+0x6c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_InitTick+0x68>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f944 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	d809      	bhi.n	8001c3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c32:	f000 f910 	bl	8001e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0x70>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e007      	b.n	8001c4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e004      	b.n	8001c4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000010 	.word	0x20000010
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <HAL_IncTick+0x1c>)
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000668 	.word	0x20000668
 8001c84:	20000010 	.word	0x20000010

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000668 	.word	0x20000668

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff29 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff40 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff33 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa4 	bl	8001dfc <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ece:	e15a      	b.n	8002186 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 814c 	beq.w	8002180 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d00b      	beq.n	8001f08 <HAL_GPIO_Init+0x48>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001efc:	2b11      	cmp	r3, #17
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d130      	bne.n	8001f6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 0201 	and.w	r2, r3, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0xea>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d123      	bne.n	8001ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0203 	and.w	r2, r3, #3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a6 	beq.w	8002180 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_GPIO_Init+0x2e4>)
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_GPIO_Init+0x2e4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6613      	str	r3, [r2, #96]	; 0x60
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x2e4>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204c:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002076:	d01f      	beq.n	80020b8 <HAL_GPIO_Init+0x1f8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <HAL_GPIO_Init+0x2ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d019      	beq.n	80020b4 <HAL_GPIO_Init+0x1f4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1f0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_GPIO_Init+0x2f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_GPIO_Init+0x2f8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1e8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_GPIO_Init+0x2fc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1e4>
 80020a0:	2305      	movs	r3, #5
 80020a2:	e00a      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e008      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020a8:	2304      	movs	r3, #4
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020ac:	2303      	movs	r3, #3
 80020ae:	e004      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_GPIO_Init+0x1fa>
 80020b8:	2300      	movs	r3, #0
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ca:	4937      	ldr	r1, [pc, #220]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_GPIO_Init+0x300>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fc:	4a30      	ldr	r2, [pc, #192]	; (80021c0 <HAL_GPIO_Init+0x300>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f ae9d 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	48000400 	.word	0x48000400
 80021b0:	48000800 	.word	0x48000800
 80021b4:	48000c00 	.word	0x48000c00
 80021b8:	48001000 	.word	0x48001000
 80021bc:	48001400 	.word	0x48001400
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002210:	e002      	b.n	8002218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f806 	bl	8002254 <HAL_GPIO_EXTI_Callback>
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800226a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226c:	b08b      	sub	sp, #44	; 0x2c
 800226e:	af06      	add	r7, sp, #24
 8002270:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0d7      	b.n	800242c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f007 fa53 	bl	800973c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fc05 	bl	8005ab2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e04c      	b.n	8002348 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3301      	adds	r3, #1
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	b298      	uxth	r0, r3
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	3336      	adds	r3, #54	; 0x36
 80022ec:	4602      	mov	r2, r0
 80022ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3303      	adds	r3, #3
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	3338      	adds	r3, #56	; 0x38
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	333c      	adds	r3, #60	; 0x3c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	3340      	adds	r3, #64	; 0x40
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3ad      	bcc.n	80022ae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e044      	b.n	80023e2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	f203 1369 	addw	r3, r3, #361	; 0x169
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3b5      	bcc.n	8002358 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	687e      	ldr	r6, [r7, #4]
 80023f4:	466d      	mov	r5, sp
 80023f6:	f106 0410 	add.w	r4, r6, #16
 80023fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	602b      	str	r3, [r5, #0]
 8002402:	1d33      	adds	r3, r6, #4
 8002404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002406:	6838      	ldr	r0, [r7, #0]
 8002408:	f003 fb6e 	bl	8005ae8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d102      	bne.n	800242a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f001 fa5e 	bl	80038e6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002434 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_PCD_Start+0x16>
 8002446:	2302      	movs	r3, #2
 8002448:	e012      	b.n	8002470 <HAL_PCD_Start+0x3c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fb14 	bl	8005a84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f005 fb00 	bl	8007a66 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f005 fb05 	bl	8007a94 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	d102      	bne.n	800249c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fb5b 	bl	8002b52 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 faf7 	bl	8007a94 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d112      	bne.n	80024d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c4:	b292      	uxth	r2, r2
 80024c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f007 f9b1 	bl	8009832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f91e 	bl	8002714 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f005 fad9 	bl	8007a94 <USB_ReadInterrupts>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ec:	d10b      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fac2 	bl	8007a94 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d10b      	bne.n	8002534 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	b292      	uxth	r2, r2
 8002530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f005 faab 	bl	8007a94 <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002548:	d133      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0204 	bic.w	r2, r2, #4
 800255c:	b292      	uxth	r2, r2
 800255e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	b292      	uxth	r2, r2
 8002576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800258c:	2100      	movs	r1, #0
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f007 fb44 	bl	8009c1c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f007 f985 	bl	80098a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ac:	b292      	uxth	r2, r2
 80025ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 fa6c 	bl	8007a94 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c6:	d126      	bne.n	8002616 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f2:	b292      	uxth	r2, r2
 80025f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0204 	orr.w	r2, r2, #4
 800260a:	b292      	uxth	r2, r2
 800260c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f007 f92d 	bl	8009870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f005 fa3a 	bl	8007a94 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b80      	cmp	r3, #128	; 0x80
 8002628:	d13f      	bne.n	80026aa <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	b292      	uxth	r2, r2
 800263e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d12b      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0204 	orr.w	r2, r2, #4
 800265e:	b292      	uxth	r2, r2
 8002660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0208 	orr.w	r2, r2, #8
 8002676:	b292      	uxth	r2, r2
 8002678:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800268c:	b29b      	uxth	r3, r3
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800269a:	2101      	movs	r1, #1
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 fabd 	bl	8009c1c <HAL_PCDEx_LPM_Callback>
 80026a2:	e002      	b.n	80026aa <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 f8e3 	bl	8009870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f005 f9f0 	bl	8007a94 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026be:	d10e      	bne.n	80026de <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d2:	b292      	uxth	r2, r2
 80026d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f007 f89c 	bl	8009816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f005 f9d6 	bl	8007a94 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	d10b      	bne.n	800270c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002706:	b292      	uxth	r2, r2
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_SetAddress+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e013      	b.n	8002756 <HAL_PCD_SetAddress+0x42>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f005 f979 	bl	8007a3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4603      	mov	r3, r0
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	460b      	mov	r3, r1
 8002772:	803b      	strh	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0e      	bge.n	80027a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	705a      	strb	r2, [r3, #1]
 80027a0:	e00e      	b.n	80027c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 0207 	and.w	r2, r3, #7
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027cc:	883a      	ldrh	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	78ba      	ldrb	r2, [r7, #2]
 80027d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_Open+0xa6>
 8002800:	2302      	movs	r3, #2
 8002802:	e00e      	b.n	8002822 <HAL_PCD_EP_Open+0xc4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 f98a 	bl	8005b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002820:	7afb      	ldrb	r3, [r7, #11]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0e      	bge.n	800285c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	705a      	strb	r2, [r3, #1]
 800285a:	e00e      	b.n	800287a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 0207 	and.w	r2, r3, #7
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_PCD_EP_Close+0x6a>
 8002890:	2302      	movs	r3, #2
 8002892:	e00e      	b.n	80028b2 <HAL_PCD_EP_Close+0x88>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fcb0 	bl	8006208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	460b      	mov	r3, r1
 80028c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	b2da      	uxtb	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6979      	ldr	r1, [r7, #20]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fe63 	bl	80065e2 <USB_EPStartXfer>
 800291c:	e005      	b.n	800292a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fe5c 	bl	80065e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 0207 	and.w	r2, r3, #7
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fe08 	bl	80065e2 <USB_EPStartXfer>
 80029d2:	e005      	b.n	80029e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fe01 	bl	80065e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0207 	and.w	r2, r3, #7
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d901      	bls.n	8002a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04c      	b.n	8002aa2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da0e      	bge.n	8002a2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	705a      	strb	r2, [r3, #1]
 8002a2c:	e00c      	b.n	8002a48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_EP_SetStall+0x7e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e01c      	b.n	8002aa2 <HAL_PCD_EP_SetStall+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fee2 	bl	8007840 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f005 f80e 	bl	8007ab4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d901      	bls.n	8002ac8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e040      	b.n	8002b4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da0e      	bge.n	8002aee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 0207 	and.w	r2, r3, #7
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_PCD_EP_ClrStall+0x82>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e00e      	b.n	8002b4a <HAL_PCD_EP_ClrStall+0xa0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fed1 	bl	80078e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08e      	sub	sp, #56	; 0x38
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b5a:	e2d1      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b64:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8152 	bne.w	8002e20 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d150      	bne.n	8002c28 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	81fb      	strh	r3, [r7, #14]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3328      	adds	r3, #40	; 0x28
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	441a      	add	r2, r3
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002be6:	2100      	movs	r1, #0
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f006 fdfa 	bl	80097e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8282 	beq.w	8003100 <PCD_EP_ISR_Handler+0x5ae>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 827d 	bne.w	8003100 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b292      	uxth	r2, r2
 8002c1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c26:	e26b      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d032      	beq.n	8002ca8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f004 ff66 	bl	8007b4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c8e:	4013      	ands	r3, r2
 8002c90:	823b      	strh	r3, [r7, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	8a3a      	ldrh	r2, [r7, #16]
 8002c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f006 fd71 	bl	8009788 <HAL_PCD_SetupStageCallback>
 8002ca6:	e22b      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ca8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f280 8227 	bge.w	8003100 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	83bb      	strh	r3, [r7, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	8bba      	ldrh	r2, [r7, #28]
 8002cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <PCD_EP_ISR_Handler+0x1e2>
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	6959      	ldr	r1, [r3, #20]
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f004 ff18 	bl	8007b4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	441a      	add	r2, r3
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f006 fd3c 	bl	80097ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d112      	bne.n	8002d82 <PCD_EP_ISR_Handler+0x230>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e02f      	b.n	8002de2 <PCD_EP_ISR_Handler+0x290>
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b3e      	cmp	r3, #62	; 0x3e
 8002d88:	d813      	bhi.n	8002db2 <PCD_EP_ISR_Handler+0x260>
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <PCD_EP_ISR_Handler+0x252>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3301      	adds	r3, #1
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e017      	b.n	8002de2 <PCD_EP_ISR_Handler+0x290>
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <PCD_EP_ISR_Handler+0x27a>
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	029b      	lsls	r3, r3, #10
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	827b      	strh	r3, [r7, #18]
 8002df4:	8a7b      	ldrh	r3, [r7, #18]
 8002df6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002dfa:	827b      	strh	r3, [r7, #18]
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e02:	827b      	strh	r3, [r7, #18]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
 8002e1e:	e16f      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f280 80e4 	bge.w	8003004 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e52:	4013      	ands	r3, r2
 8002e54:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e6e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	7b1b      	ldrb	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d120      	bne.n	8002ece <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8083 	beq.w	8002fc0 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	6959      	ldr	r1, [r3, #20]
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	88da      	ldrh	r2, [r3, #6]
 8002ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ec8:	f004 fe41 	bl	8007b4e <USB_ReadPMA>
 8002ecc:	e078      	b.n	8002fc0 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	78db      	ldrb	r3, [r3, #3]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d108      	bne.n	8002ee8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ed6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f91d 	bl	800311c <HAL_PCD_EP_DB_Receive>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ee6:	e06b      	b.n	8002fc0 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01f      	beq.n	8002f82 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f66:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d028      	beq.n	8002fc0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	6959      	ldr	r1, [r3, #20]
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	891a      	ldrh	r2, [r3, #8]
 8002f7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f7c:	f004 fde7 	bl	8007b4e <USB_ReadPMA>
 8002f80:	e01e      	b.n	8002fc0 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6959      	ldr	r1, [r3, #20]
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	895a      	ldrh	r2, [r3, #10]
 8002fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fbc:	f004 fdc7 	bl	8007b4e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fc6:	441a      	add	r2, r3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fd2:	441a      	add	r2, r3
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <PCD_EP_ISR_Handler+0x498>
 8002fe0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d206      	bcs.n	8002ff8 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f006 fbdb 	bl	80097ac <HAL_PCD_DataOutStageCallback>
 8002ff6:	e005      	b.n	8003004 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 faef 	bl	80065e2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d078      	beq.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800300e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	843b      	strh	r3, [r7, #32]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8c3b      	ldrh	r3, [r7, #32]
 800304e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	78db      	ldrb	r3, [r3, #3]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d108      	bne.n	8003074 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003066:	2b02      	cmp	r3, #2
 8003068:	d144      	bne.n	80030f4 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800306a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d13f      	bne.n	80030f4 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	4413      	add	r3, r2
 800308e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	8bfb      	ldrh	r3, [r7, #30]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d906      	bls.n	80030b2 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	8bfb      	ldrh	r3, [r7, #30]
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	619a      	str	r2, [r3, #24]
 80030b0:	e002      	b.n	80030b8 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f006 fb8b 	bl	80097e2 <HAL_PCD_DataInStageCallback>
 80030cc:	e018      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	8bfb      	ldrh	r3, [r7, #30]
 80030d4:	441a      	add	r2, r3
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	8bfb      	ldrh	r3, [r7, #30]
 80030e0:	441a      	add	r2, r3
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fa78 	bl	80065e2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80030f2:	e005      	b.n	8003100 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030f6:	461a      	mov	r2, r3
 80030f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f917 	bl	800332e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003108:	b29b      	uxth	r3, r3
 800310a:	b21b      	sxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f6ff ad25 	blt.w	8002b5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3738      	adds	r7, #56	; 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d07c      	beq.n	800322e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4413      	add	r3, r2
 800314e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003158:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	8b7b      	ldrh	r3, [r7, #26]
 8003160:	429a      	cmp	r2, r3
 8003162:	d306      	bcc.n	8003172 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	e002      	b.n	8003178 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d123      	bne.n	80031c8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	833b      	strh	r3, [r7, #24]
 800319c:	8b3b      	ldrh	r3, [r7, #24]
 800319e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a2:	833b      	strh	r3, [r7, #24]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	8b3b      	ldrh	r3, [r7, #24]
 80031b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01f      	beq.n	8003212 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	82fb      	strh	r3, [r7, #22]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	8afb      	ldrh	r3, [r7, #22]
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003212:	8b7b      	ldrh	r3, [r7, #26]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8085 	beq.w	8003324 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6959      	ldr	r1, [r3, #20]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	891a      	ldrh	r2, [r3, #8]
 8003226:	8b7b      	ldrh	r3, [r7, #26]
 8003228:	f004 fc91 	bl	8007b4e <USB_ReadPMA>
 800322c:	e07a      	b.n	8003324 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4413      	add	r3, r2
 8003248:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003252:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	8b7b      	ldrh	r3, [r7, #26]
 800325a:	429a      	cmp	r2, r3
 800325c:	d306      	bcc.n	800326c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	8b7b      	ldrh	r3, [r7, #26]
 8003264:	1ad2      	subs	r2, r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	619a      	str	r2, [r3, #24]
 800326a:	e002      	b.n	8003272 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d123      	bne.n	80032c2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	83fb      	strh	r3, [r7, #30]
 8003296:	8bfb      	ldrh	r3, [r7, #30]
 8003298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800329c:	83fb      	strh	r3, [r7, #30]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	8bfb      	ldrh	r3, [r7, #30]
 80032ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11f      	bne.n	800330c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	83bb      	strh	r3, [r7, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	8bbb      	ldrh	r3, [r7, #28]
 80032f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003308:	b29b      	uxth	r3, r3
 800330a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800330c:	8b7b      	ldrh	r3, [r7, #26]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6959      	ldr	r1, [r3, #20]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	895a      	ldrh	r2, [r3, #10]
 800331e:	8b7b      	ldrh	r3, [r7, #26]
 8003320:	f004 fc15 	bl	8007b4e <USB_ReadPMA>
    }
  }

  return count;
 8003324:	8b7b      	ldrh	r3, [r7, #26]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b092      	sub	sp, #72	; 0x48
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8130 	beq.w	80035a8 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	4413      	add	r3, r2
 8003362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003374:	429a      	cmp	r2, r3
 8003376:	d906      	bls.n	8003386 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800337e:	1ad2      	subs	r2, r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	619a      	str	r2, [r3, #24]
 8003384:	e002      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d12c      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f006 fa21 	bl	80097e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 822d 	beq.w	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	827b      	strh	r3, [r7, #18]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8a7b      	ldrh	r3, [r7, #18]
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
 80033ec:	e20b      	b.n	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01f      	beq.n	8003438 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	b29b      	uxth	r3, r3
 8003436:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343e:	2b01      	cmp	r3, #1
 8003440:	f040 81e1 	bne.w	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800344a:	441a      	add	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003456:	441a      	add	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d309      	bcc.n	800347c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	1ad2      	subs	r2, r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	621a      	str	r2, [r3, #32]
 800347a:	e014      	b.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8003484:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003490:	e009      	b.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d155      	bne.n	800355a <HAL_PCD_EP_DB_Transmit+0x22c>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	4413      	add	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00da      	lsls	r2, r3, #3
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d112      	bne.n	8003502 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	e047      	b.n	8003592 <HAL_PCD_EP_DB_Transmit+0x264>
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2b3e      	cmp	r3, #62	; 0x3e
 8003506:	d811      	bhi.n	800352c <HAL_PCD_EP_DB_Transmit+0x1fe>
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	3301      	adds	r3, #1
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	b29b      	uxth	r3, r3
 8003522:	029b      	lsls	r3, r3, #10
 8003524:	b29a      	uxth	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	801a      	strh	r2, [r3, #0]
 800352a:	e032      	b.n	8003592 <HAL_PCD_EP_DB_Transmit+0x264>
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_PCD_EP_DB_Transmit+0x214>
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	b29b      	uxth	r3, r3
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	b29b      	uxth	r3, r3
 800354a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003552:	b29a      	uxth	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	e01b      	b.n	8003592 <HAL_PCD_EP_DB_Transmit+0x264>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d117      	bne.n	8003592 <HAL_PCD_EP_DB_Transmit+0x264>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	4413      	add	r3, r2
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	00da      	lsls	r2, r3, #3
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	4413      	add	r3, r2
 8003584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	b29a      	uxth	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6959      	ldr	r1, [r3, #20]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	891a      	ldrh	r2, [r3, #8]
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f004 fa93 	bl	8007acc <USB_WritePMA>
 80035a6:	e12e      	b.n	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035cc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d306      	bcc.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035de:	1ad2      	subs	r2, r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	619a      	str	r2, [r3, #24]
 80035e4:	e002      	b.n	80035ec <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d12c      	bne.n	800364e <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f006 f8f1 	bl	80097e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 80fd 	bne.w	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003648:	b29b      	uxth	r3, r3
 800364a:	8013      	strh	r3, [r2, #0]
 800364c:	e0db      	b.n	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11f      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	f040 80b1 	bne.w	8003806 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036aa:	441a      	add	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036b6:	441a      	add	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d309      	bcc.n	80036dc <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	1ad2      	subs	r2, r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	621a      	str	r2, [r3, #32]
 80036da:	e014      	b.n	8003706 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80036e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036f0:	e009      	b.n	8003706 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d155      	bne.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x492>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003728:	4413      	add	r3, r2
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00da      	lsls	r2, r3, #3
 8003732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003734:	4413      	add	r3, r2
 8003736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800373a:	643b      	str	r3, [r7, #64]	; 0x40
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	2b00      	cmp	r3, #0
 8003740:	d112      	bne.n	8003768 <HAL_PCD_EP_DB_Transmit+0x43a>
 8003742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800374c:	b29a      	uxth	r2, r3
 800374e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003760:	b29a      	uxth	r2, r3
 8003762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	e044      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	2b3e      	cmp	r3, #62	; 0x3e
 800376c:	d811      	bhi.n	8003792 <HAL_PCD_EP_DB_Transmit+0x464>
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_PCD_EP_DB_Transmit+0x456>
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	3301      	adds	r3, #1
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	b29b      	uxth	r3, r3
 8003788:	029b      	lsls	r3, r3, #10
 800378a:	b29a      	uxth	r2, r3
 800378c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	e02f      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a4:	3b01      	subs	r3, #1
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	029b      	lsls	r3, r3, #10
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	e018      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d114      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	4413      	add	r3, r2
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	00da      	lsls	r2, r3, #3
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	4413      	add	r3, r2
 80037e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6959      	ldr	r1, [r3, #20]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	895a      	ldrh	r2, [r3, #10]
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	b29b      	uxth	r3, r3
 8003802:	f004 f963 	bl	8007acc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003820:	823b      	strh	r3, [r7, #16]
 8003822:	8a3b      	ldrh	r3, [r7, #16]
 8003824:	f083 0310 	eor.w	r3, r3, #16
 8003828:	823b      	strh	r3, [r7, #16]
 800382a:	8a3b      	ldrh	r3, [r7, #16]
 800382c:	f083 0320 	eor.w	r3, r3, #32
 8003830:	823b      	strh	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	441a      	add	r2, r3
 8003840:	8a3b      	ldrh	r3, [r7, #16]
 8003842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	b29b      	uxth	r3, r3
 8003854:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3748      	adds	r7, #72	; 0x48
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	817b      	strh	r3, [r7, #10]
 800386e:	4613      	mov	r3, r2
 8003870:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003872:	897b      	ldrh	r3, [r7, #10]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e009      	b.n	80038aa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003896:	897a      	ldrh	r2, [r7, #10]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80038aa:	893b      	ldrh	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	80da      	strh	r2, [r3, #6]
 80038be:	e00b      	b.n	80038d8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2201      	movs	r2, #1
 80038c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800390a:	b29b      	uxth	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800391e:	b29b      	uxth	r3, r3
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d141      	bne.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800394a:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d131      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003958:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395e:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003968:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003970:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003976:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003978:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2232      	movs	r2, #50	; 0x32
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	0c9b      	lsrs	r3, r3, #18
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800398e:	e002      	b.n	8003996 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003996:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d102      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f2      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039aa:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d158      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e057      	b.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039bc:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039cc:	e04d      	b.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d141      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d6:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d131      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ea:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039fc:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2232      	movs	r2, #50	; 0x32
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0c9b      	lsrs	r3, r3, #18
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1a:	e002      	b.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d102      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f2      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d112      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e011      	b.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a58:	e007      	b.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	20000008 	.word	0x20000008
 8003a80:	431bde83 	.word	0x431bde83

08003a84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a92:	6093      	str	r3, [r2, #8]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e308      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d075      	beq.n	8003bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac2:	4ba3      	ldr	r3, [pc, #652]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003acc:	4ba0      	ldr	r3, [pc, #640]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3e>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x44>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e2e3      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x74>
 8003b0a:	4b91      	ldr	r3, [pc, #580]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a90      	ldr	r2, [pc, #576]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b8b      	ldr	r3, [pc, #556]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a8a      	ldr	r2, [pc, #552]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a87      	ldr	r2, [pc, #540]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a80      	ldr	r2, [pc, #512]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f894 	bl	8001c88 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe f890 	bl	8001c88 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e2a8      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b76:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f880 	bl	8001c88 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f87c 	bl	8001c88 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e294      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d075      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc4:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d102      	bne.n	8003bda <HAL_RCC_OscConfig+0x136>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_OscConfig+0x13c>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11f      	bne.n	8003c20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be0:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x154>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e267      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	4952      	ldr	r1, [pc, #328]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_RCC_OscConfig+0x2b0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fd ffed 	bl	8001bf0 <HAL_InitTick>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d043      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e253      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a48      	ldr	r2, [pc, #288]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f828 	bl	8001c88 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f824 	bl	8001c88 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e23c      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4e:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
 8003c6e:	e01a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a36      	ldr	r2, [pc, #216]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f804 	bl	8001c88 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe f800 	bl	8001c88 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e218      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1e0>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd ffdd 	bl	8001c88 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd ffd9 	bl	8001c88 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1f1      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ef      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x22e>
 8003cf2:	e01b      	b.n	8003d2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd ffc0 	bl	8001c88 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fd ffbc 	bl	8001c88 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1d4      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ef      	bne.n	8003d0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80ab 	beq.w	8003e90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2b4>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e005      	b.n	8003d5a <HAL_RCC_OscConfig+0x2b6>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4baf      	ldr	r3, [pc, #700]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	4aae      	ldr	r2, [pc, #696]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6a:	4bac      	ldr	r3, [pc, #688]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7a:	4ba9      	ldr	r3, [pc, #676]	; (8004020 <HAL_RCC_OscConfig+0x57c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d86:	4ba6      	ldr	r3, [pc, #664]	; (8004020 <HAL_RCC_OscConfig+0x57c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4aa5      	ldr	r2, [pc, #660]	; (8004020 <HAL_RCC_OscConfig+0x57c>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd ff79 	bl	8001c88 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd ff75 	bl	8001c88 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e18d      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dac:	4b9c      	ldr	r3, [pc, #624]	; (8004020 <HAL_RCC_OscConfig+0x57c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d108      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x32e>
 8003dc0:	4b96      	ldr	r3, [pc, #600]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	4a95      	ldr	r2, [pc, #596]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd0:	e024      	b.n	8003e1c <HAL_RCC_OscConfig+0x378>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d110      	bne.n	8003dfc <HAL_RCC_OscConfig+0x358>
 8003dda:	4b90      	ldr	r3, [pc, #576]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	4a8e      	ldr	r2, [pc, #568]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dea:	4b8c      	ldr	r3, [pc, #560]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	4a8a      	ldr	r2, [pc, #552]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfa:	e00f      	b.n	8003e1c <HAL_RCC_OscConfig+0x378>
 8003dfc:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a86      	ldr	r2, [pc, #536]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	4b83      	ldr	r3, [pc, #524]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a82      	ldr	r2, [pc, #520]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd ff30 	bl	8001c88 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd ff2c 	bl	8001c88 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e142      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ed      	beq.n	8003e2c <HAL_RCC_OscConfig+0x388>
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fd ff19 	bl	8001c88 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fd ff15 	bl	8001c88 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e12b      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ed      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	4a64      	ldr	r2, [pc, #400]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01c      	beq.n	8003ede <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	4a5c      	ldr	r2, [pc, #368]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fee8 	bl	8001c88 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ebc:	f7fd fee4 	bl	8001c88 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0fc      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ef      	beq.n	8003ebc <HAL_RCC_OscConfig+0x418>
 8003edc:	e01b      	b.n	8003f16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ede:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee4:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd fecb 	bl	8001c88 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef6:	f7fd fec7 	bl	8001c88 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0df      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f08:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ef      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80d3 	beq.w	80040c6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	f000 808d 	beq.w	8004048 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d15a      	bne.n	8003fec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a38      	ldr	r2, [pc, #224]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd fea1 	bl	8001c88 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fe9d 	bl	8001c88 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0b5      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b2c      	ldr	r3, [pc, #176]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_RCC_OscConfig+0x580>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6a11      	ldr	r1, [r2, #32]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f78:	3a01      	subs	r2, #1
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	4311      	orrs	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f82:	0212      	lsls	r2, r2, #8
 8003f84:	4311      	orrs	r1, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f8a:	0852      	lsrs	r2, r2, #1
 8003f8c:	3a01      	subs	r2, #1
 8003f8e:	0552      	lsls	r2, r2, #21
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f96:	0852      	lsrs	r2, r2, #1
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	0652      	lsls	r2, r2, #25
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fa2:	06d2      	lsls	r2, r2, #27
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	491d      	ldr	r1, [pc, #116]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fe60 	bl	8001c88 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd fe5c 	bl	8001c88 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e074      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x528>
 8003fea:	e06c      	b.n	80040c6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_OscConfig+0x578>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_RCC_OscConfig+0x578>)
 800400a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd fe38 	bl	8001c88 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401a:	e00e      	b.n	800403a <HAL_RCC_OscConfig+0x596>
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
 8004024:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fe2e 	bl	8001c88 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e046      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_OscConfig+0x62c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x584>
 8004046:	e03e      	b.n	80040c6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e039      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004054:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCC_OscConfig+0x62c>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0203 	and.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	429a      	cmp	r2, r3
 8004066:	d12c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	3b01      	subs	r3, #1
 8004074:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d123      	bne.n	80040c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d11b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d113      	bne.n	80040c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e11e      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b91      	ldr	r3, [pc, #580]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b8e      	ldr	r3, [pc, #568]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	498c      	ldr	r1, [pc, #560]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b8a      	ldr	r3, [pc, #552]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e106      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d073      	beq.n	8004210 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d129      	bne.n	8004184 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004130:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0f4      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004140:	f000 f966 	bl	8004410 <RCC_GetSysClockFreqFromPLLSource>
 8004144:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4a7c      	ldr	r2, [pc, #496]	; (800433c <HAL_RCC_ClockConfig+0x268>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d93f      	bls.n	80041ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004162:	2b00      	cmp	r3, #0
 8004164:	d033      	beq.n	80041ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d12f      	bne.n	80041ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800416e:	4b72      	ldr	r3, [pc, #456]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004176:	4a70      	ldr	r2, [pc, #448]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e024      	b.n	80041ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d107      	bne.n	800419c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418c:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0c6      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419c:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0be      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041ac:	f000 f8ce 	bl	800434c <HAL_RCC_GetSysClockFreq>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_RCC_ClockConfig+0x268>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d909      	bls.n	80041ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ba:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c2:	4a5d      	ldr	r2, [pc, #372]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4957      	ldr	r1, [pc, #348]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fd fd52 	bl	8001c88 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fd fd4e 	bl	8001c88 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e095      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b4e      	ldr	r3, [pc, #312]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004228:	4b43      	ldr	r3, [pc, #268]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a42      	ldr	r2, [pc, #264]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800422e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004232:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004240:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800424a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800424e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4936      	ldr	r1, [pc, #216]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
 8004262:	e008      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d105      	bne.n	8004276 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800426a:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a32      	ldr	r2, [pc, #200]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004274:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004276:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d21d      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 020f 	bic.w	r2, r3, #15
 800428c:	4929      	ldr	r1, [pc, #164]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004294:	f7fd fcf8 	bl	8001c88 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fd fcf4 	bl	8001c88 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e03b      	b.n	800432a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_RCC_ClockConfig+0x260>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1ed      	bne.n	800429c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4917      	ldr	r1, [pc, #92]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490f      	ldr	r1, [pc, #60]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042fe:	f000 f825 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8004302:	4601      	mov	r1, r0
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCC_ClockConfig+0x264>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <HAL_RCC_ClockConfig+0x26c>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	fa21 f303 	lsr.w	r3, r1, r3
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_RCC_ClockConfig+0x270>)
 800431c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd fc64 	bl	8001bf0 <HAL_InitTick>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40022000 	.word	0x40022000
 8004338:	40021000 	.word	0x40021000
 800433c:	04c4b400 	.word	0x04c4b400
 8004340:	08009dd4 	.word	0x08009dd4
 8004344:	20000008 	.word	0x20000008
 8004348:	2000000c 	.word	0x2000000c

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d102      	bne.n	8004364 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e047      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d102      	bne.n	8004376 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	e03e      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d136      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	3301      	adds	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a0:	4a1a      	ldr	r2, [pc, #104]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043aa:	68d2      	ldr	r2, [r2, #12]
 80043ac:	0a12      	lsrs	r2, r2, #8
 80043ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	617b      	str	r3, [r7, #20]
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043ba:	4a13      	ldr	r2, [pc, #76]	; (8004408 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c4:	68d2      	ldr	r2, [r2, #12]
 80043c6:	0a12      	lsrs	r2, r2, #8
 80043c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
      break;
 80043d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	0e5b      	lsrs	r3, r3, #25
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	e001      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043f4:	693b      	ldr	r3, [r7, #16]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	00f42400 	.word	0x00f42400
 800440c:	007a1200 	.word	0x007a1200

08004410 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d10c      	bne.n	800444e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800443e:	68d2      	ldr	r2, [r2, #12]
 8004440:	0a12      	lsrs	r2, r2, #8
 8004442:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
    break;
 800444c:	e00c      	b.n	8004468 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800444e:	4a12      	ldr	r2, [pc, #72]	; (8004498 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	0a12      	lsrs	r2, r2, #8
 800445c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]
    break;
 8004466:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0e5b      	lsrs	r3, r3, #25
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004482:	687b      	ldr	r3, [r7, #4]
}
 8004484:	4618      	mov	r0, r3
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40021000 	.word	0x40021000
 8004494:	007a1200 	.word	0x007a1200
 8004498:	00f42400 	.word	0x00f42400

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a8:	2300      	movs	r3, #0
 80044aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8098 	beq.w	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2300      	movs	r3, #0
 80044bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6593      	str	r3, [r2, #88]	; 0x58
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e6:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a39      	ldr	r2, [pc, #228]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044f2:	f7fd fbc9 	bl	8001c88 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f8:	e009      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fd fbc5 	bl	8001c88 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d902      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	74fb      	strb	r3, [r7, #19]
        break;
 800450c:	e005      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450e:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ef      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d159      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01e      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	d019      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fd fb85 	bl	8001c88 <HAL_GetTick>
 800457e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004580:	e00b      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd fb81 	bl	8001c88 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d902      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	74fb      	strb	r3, [r7, #19]
            break;
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ec      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
 80045ca:	e005      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d8:	7c7b      	ldrb	r3, [r7, #17]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045de:	4ba6      	ldr	r3, [pc, #664]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	4aa5      	ldr	r2, [pc, #660]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045f6:	4ba0      	ldr	r3, [pc, #640]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 0203 	bic.w	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	499c      	ldr	r1, [pc, #624]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004618:	4b97      	ldr	r3, [pc, #604]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 020c 	bic.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4994      	ldr	r1, [pc, #592]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800463a:	4b8f      	ldr	r3, [pc, #572]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	498b      	ldr	r1, [pc, #556]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800465c:	4b86      	ldr	r3, [pc, #536]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4983      	ldr	r1, [pc, #524]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800467e:	4b7e      	ldr	r3, [pc, #504]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	497a      	ldr	r1, [pc, #488]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a0:	4b75      	ldr	r3, [pc, #468]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	4972      	ldr	r1, [pc, #456]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c2:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	4969      	ldr	r1, [pc, #420]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e4:	4b64      	ldr	r3, [pc, #400]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4961      	ldr	r1, [pc, #388]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	4958      	ldr	r1, [pc, #352]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d015      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	4950      	ldr	r1, [pc, #320]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004746:	d105      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004748:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004752:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004760:	4b45      	ldr	r3, [pc, #276]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4942      	ldr	r1, [pc, #264]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004780:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004798:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4934      	ldr	r1, [pc, #208]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b6:	d105      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d0:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	4926      	ldr	r1, [pc, #152]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	4918      	ldr	r1, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a12      	ldr	r2, [pc, #72]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004832:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800486c:	7cbb      	ldrb	r3, [r7, #18]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e049      	b.n	8004922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f814 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fb78 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e049      	b.n	80049d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f841 	bl	80049d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 fb21 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x24>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e03c      	b.n	8004a8a <HAL_TIM_PWM_Start+0x9e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d109      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x3e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e02f      	b.n	8004a8a <HAL_TIM_PWM_Start+0x9e>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x58>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e022      	b.n	8004a8a <HAL_TIM_PWM_Start+0x9e>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d109      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x72>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e015      	b.n	8004a8a <HAL_TIM_PWM_Start+0x9e>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d109      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x8c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e008      	b.n	8004a8a <HAL_TIM_PWM_Start+0x9e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e097      	b.n	8004bc2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xb6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa0:	e023      	b.n	8004aea <HAL_TIM_PWM_Start+0xfe>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xc6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	e01b      	b.n	8004aea <HAL_TIM_PWM_Start+0xfe>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xd6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac0:	e013      	b.n	8004aea <HAL_TIM_PWM_Start+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xe6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad0:	e00b      	b.n	8004aea <HAL_TIM_PWM_Start+0xfe>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d104      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0xf6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	e003      	b.n	8004aea <HAL_TIM_PWM_Start+0xfe>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2201      	movs	r2, #1
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fe7e 	bl	80057f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a33      	ldr	r2, [pc, #204]	; (8004bcc <HAL_TIM_PWM_Start+0x1e0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x13e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x13e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x13e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_TIM_PWM_Start+0x1ec>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x13e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <HAL_TIM_PWM_Start+0x1f0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x142>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <HAL_TIM_PWM_Start+0x144>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a20      	ldr	r2, [pc, #128]	; (8004bcc <HAL_TIM_PWM_Start+0x1e0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x194>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d013      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x194>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <HAL_TIM_PWM_Start+0x1f4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x194>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <HAL_TIM_PWM_Start+0x1f8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x194>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x194>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d115      	bne.n	8004bac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_TIM_PWM_Start+0x1fc>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d015      	beq.n	8004bbe <HAL_TIM_PWM_Start+0x1d2>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b98:	d011      	beq.n	8004bbe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	e008      	b.n	8004bbe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	00010007 	.word	0x00010007

08004bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0fd      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b14      	cmp	r3, #20
 8004c12:	f200 80f0 	bhi.w	8004df6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c71 	.word	0x08004c71
 8004c20:	08004df7 	.word	0x08004df7
 8004c24:	08004df7 	.word	0x08004df7
 8004c28:	08004df7 	.word	0x08004df7
 8004c2c:	08004cb1 	.word	0x08004cb1
 8004c30:	08004df7 	.word	0x08004df7
 8004c34:	08004df7 	.word	0x08004df7
 8004c38:	08004df7 	.word	0x08004df7
 8004c3c:	08004cf3 	.word	0x08004cf3
 8004c40:	08004df7 	.word	0x08004df7
 8004c44:	08004df7 	.word	0x08004df7
 8004c48:	08004df7 	.word	0x08004df7
 8004c4c:	08004d33 	.word	0x08004d33
 8004c50:	08004df7 	.word	0x08004df7
 8004c54:	08004df7 	.word	0x08004df7
 8004c58:	08004df7 	.word	0x08004df7
 8004c5c:	08004d75 	.word	0x08004d75
 8004c60:	08004df7 	.word	0x08004df7
 8004c64:	08004df7 	.word	0x08004df7
 8004c68:	08004df7 	.word	0x08004df7
 8004c6c:	08004db5 	.word	0x08004db5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa2a 	bl	80050d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	619a      	str	r2, [r3, #24]
      break;
 8004cae:	e0a3      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fa9a 	bl	80051f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6999      	ldr	r1, [r3, #24]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	619a      	str	r2, [r3, #24]
      break;
 8004cf0:	e082      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fb03 	bl	8005304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0208 	orr.w	r2, r2, #8
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0204 	bic.w	r2, r2, #4
 8004d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69d9      	ldr	r1, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	61da      	str	r2, [r3, #28]
      break;
 8004d30:	e062      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fb6b 	bl	8005414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	021a      	lsls	r2, r3, #8
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	61da      	str	r2, [r3, #28]
      break;
 8004d72:	e041      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fbd4 	bl	8005528 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004db2:	e021      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fc18 	bl	80055f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004df6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_ConfigClockSource+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0b9      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x18c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d02e      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xb2>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d812      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x7e>
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	f000 8084 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004e6a:	2b30      	cmp	r3, #48	; 0x30
 8004e6c:	d806      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x70>
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d07f      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d07d      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07b      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e7a:	e084      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d048      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x106>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d056      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x126>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d064      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004e88:	e07d      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004e8a:	4a45      	ldr	r2, [pc, #276]	; (8004fa0 <HAL_TIM_ConfigClockSource+0x194>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d070      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004e90:	4a43      	ldr	r2, [pc, #268]	; (8004fa0 <HAL_TIM_ConfigClockSource+0x194>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d809      	bhi.n	8004eaa <HAL_TIM_ConfigClockSource+0x9e>
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9a:	d027      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0xe0>
 8004e9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ea0:	d067      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d06d      	beq.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ea8:	e06d      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	; (8004fa4 <HAL_TIM_ConfigClockSource+0x198>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d060      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004eb0:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <HAL_TIM_ConfigClockSource+0x19c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d05d      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <HAL_TIM_ConfigClockSource+0x1a0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d05a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004ebc:	e063      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f000 fc71 	bl	80057b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	609a      	str	r2, [r3, #8]
      break;
 8004eea:	e04c      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6899      	ldr	r1, [r3, #8]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f000 fc5a 	bl	80057b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0e:	609a      	str	r2, [r3, #8]
      break;
 8004f10:	e039      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fbcc 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2150      	movs	r1, #80	; 0x50
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fc25 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8004f30:	e029      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 fbeb 	bl	800571a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2160      	movs	r1, #96	; 0x60
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fc15 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8004f50:	e019      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 fbac 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fc05 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8004f70:	e009      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f000 fbfc 	bl	800577a <TIM_ITRx_SetConfig>
        break;
 8004f82:	e000      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004f84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	00100020 	.word	0x00100020
 8004fa4:	00100040 	.word	0x00100040
 8004fa8:	00100070 	.word	0x00100070
 8004fac:	00100030 	.word	0x00100030

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3c      	ldr	r2, [pc, #240]	; (80050b4 <TIM_Base_SetConfig+0x104>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a39      	ldr	r2, [pc, #228]	; (80050b8 <TIM_Base_SetConfig+0x108>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a38      	ldr	r2, [pc, #224]	; (80050bc <TIM_Base_SetConfig+0x10c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a37      	ldr	r2, [pc, #220]	; (80050c0 <TIM_Base_SetConfig+0x110>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <TIM_Base_SetConfig+0x104>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <TIM_Base_SetConfig+0x108>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a29      	ldr	r2, [pc, #164]	; (80050bc <TIM_Base_SetConfig+0x10c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <TIM_Base_SetConfig+0x110>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a25      	ldr	r2, [pc, #148]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <TIM_Base_SetConfig+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0xe8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <TIM_Base_SetConfig+0x110>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0xe8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0xe8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0xe8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a0e      	ldr	r2, [pc, #56]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d103      	bne.n	80050a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	615a      	str	r2, [r3, #20]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40013400 	.word	0x40013400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0302 	bic.w	r3, r3, #2
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <TIM_OC1_SetConfig+0x10c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00f      	beq.n	8005150 <TIM_OC1_SetConfig+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <TIM_OC1_SetConfig+0x110>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_OC1_SetConfig+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2a      	ldr	r2, [pc, #168]	; (80051e4 <TIM_OC1_SetConfig+0x114>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d007      	beq.n	8005150 <TIM_OC1_SetConfig+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <TIM_OC1_SetConfig+0x118>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_OC1_SetConfig+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a28      	ldr	r2, [pc, #160]	; (80051ec <TIM_OC1_SetConfig+0x11c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10c      	bne.n	800516a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0308 	bic.w	r3, r3, #8
 8005156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <TIM_OC1_SetConfig+0x10c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00f      	beq.n	8005192 <TIM_OC1_SetConfig+0xc2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <TIM_OC1_SetConfig+0x110>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <TIM_OC1_SetConfig+0xc2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <TIM_OC1_SetConfig+0x114>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <TIM_OC1_SetConfig+0xc2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <TIM_OC1_SetConfig+0x118>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_OC1_SetConfig+0xc2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <TIM_OC1_SetConfig+0x11c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d111      	bne.n	80051b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0210 	bic.w	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0320 	bic.w	r3, r3, #32
 800523e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <TIM_OC2_SetConfig+0x100>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC2_SetConfig+0x6c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <TIM_OC2_SetConfig+0x104>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10d      	bne.n	8005278 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <TIM_OC2_SetConfig+0x100>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00f      	beq.n	80052a0 <TIM_OC2_SetConfig+0xb0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <TIM_OC2_SetConfig+0x104>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00b      	beq.n	80052a0 <TIM_OC2_SetConfig+0xb0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <TIM_OC2_SetConfig+0x108>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_OC2_SetConfig+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <TIM_OC2_SetConfig+0x10c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC2_SetConfig+0xb0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <TIM_OC2_SetConfig+0x110>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d113      	bne.n	80052c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40013400 	.word	0x40013400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800

08005304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a27      	ldr	r2, [pc, #156]	; (8005400 <TIM_OC3_SetConfig+0xfc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC3_SetConfig+0x6a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a26      	ldr	r2, [pc, #152]	; (8005404 <TIM_OC3_SetConfig+0x100>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10d      	bne.n	800538a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_OC3_SetConfig+0xfc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_OC3_SetConfig+0xae>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <TIM_OC3_SetConfig+0x100>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_OC3_SetConfig+0xae>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <TIM_OC3_SetConfig+0x104>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC3_SetConfig+0xae>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <TIM_OC3_SetConfig+0x108>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0xae>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <TIM_OC3_SetConfig+0x10c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d113      	bne.n	80053da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <TIM_OC4_SetConfig+0x100>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC4_SetConfig+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a27      	ldr	r2, [pc, #156]	; (8005518 <TIM_OC4_SetConfig+0x104>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10d      	bne.n	800549c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <TIM_OC4_SetConfig+0x100>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00f      	beq.n	80054c4 <TIM_OC4_SetConfig+0xb0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <TIM_OC4_SetConfig+0x104>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_OC4_SetConfig+0xb0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <TIM_OC4_SetConfig+0x108>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC4_SetConfig+0xb0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <TIM_OC4_SetConfig+0x10c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC4_SetConfig+0xb0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a19      	ldr	r2, [pc, #100]	; (8005524 <TIM_OC4_SetConfig+0x110>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d113      	bne.n	80054ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800556c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a17      	ldr	r2, [pc, #92]	; (80055dc <TIM_OC5_SetConfig+0xb4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00f      	beq.n	80055a2 <TIM_OC5_SetConfig+0x7a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <TIM_OC5_SetConfig+0xb8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00b      	beq.n	80055a2 <TIM_OC5_SetConfig+0x7a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <TIM_OC5_SetConfig+0xbc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <TIM_OC5_SetConfig+0x7a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <TIM_OC5_SetConfig+0xc0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_OC5_SetConfig+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <TIM_OC5_SetConfig+0xc4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d109      	bne.n	80055b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	051b      	lsls	r3, r3, #20
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <TIM_OC6_SetConfig+0xb8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_OC6_SetConfig+0x7c>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a17      	ldr	r2, [pc, #92]	; (80056ac <TIM_OC6_SetConfig+0xbc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00b      	beq.n	800566c <TIM_OC6_SetConfig+0x7c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <TIM_OC6_SetConfig+0xc0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC6_SetConfig+0x7c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <TIM_OC6_SetConfig+0xc4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC6_SetConfig+0x7c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_OC6_SetConfig+0xc8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d109      	bne.n	8005680 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0210 	bic.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	f043 0307 	orr.w	r3, r3, #7
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	021a      	lsls	r2, r3, #8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2201      	movs	r2, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	431a      	orrs	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005854:	2302      	movs	r3, #2
 8005856:	e065      	b.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d108      	bne.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d013      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a13      	ldr	r2, [pc, #76]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10c      	bne.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40014000 	.word	0x40014000

08005944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800595c:	2302      	movs	r3, #2
 800595e:	e087      	b.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d106      	bne.n	80059fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1e      	ldr	r2, [pc, #120]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d126      	bne.n	8005a5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	051b      	lsls	r3, r3, #20
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0e      	ldr	r2, [pc, #56]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d106      	bne.n	8005a5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40013400 	.word	0x40013400

08005a84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a94:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005abe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ae8:	b084      	sub	sp, #16
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	f107 0014 	add.w	r0, r7, #20
 8005af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	b004      	add	sp, #16
 8005b28:	4770      	bx	lr
	...

08005b2c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b09b      	sub	sp, #108	; 0x6c
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d81f      	bhi.n	8005b9e <USB_ActivateEndpoint+0x72>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <USB_ActivateEndpoint+0x38>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b75 	.word	0x08005b75
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005ba7 	.word	0x08005ba7
 8005b70:	08005b83 	.word	0x08005b83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b80:	e012      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b8e:	e00b      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b9c:	e004      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005ba4:	e000      	b.n	8005ba8 <USB_ActivateEndpoint+0x7c>
      break;
 8005ba6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 8149 	bne.w	8005eb0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8084 	beq.w	8005d30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	00da      	lsls	r2, r3, #3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	88db      	ldrh	r3, [r3, #6]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	81fb      	strh	r3, [r7, #14]
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <USB_ActivateEndpoint+0x180>
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	81bb      	strh	r3, [r7, #12]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	89bb      	ldrh	r3, [r7, #12]
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d020      	beq.n	8005cf6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	813b      	strh	r3, [r7, #8]
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	f083 0320 	eor.w	r3, r3, #32
 8005cd2:	813b      	strh	r3, [r7, #8]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	893b      	ldrh	r3, [r7, #8]
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	e27f      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	897b      	ldrh	r3, [r7, #10]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e262      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	4413      	add	r3, r2
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00da      	lsls	r2, r3, #3
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	88db      	ldrh	r3, [r3, #6]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	4413      	add	r3, r2
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	00da      	lsls	r2, r3, #3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d112      	bne.n	8005db6 <USB_ActivateEndpoint+0x28a>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e02f      	b.n	8005e16 <USB_ActivateEndpoint+0x2ea>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d813      	bhi.n	8005de6 <USB_ActivateEndpoint+0x2ba>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <USB_ActivateEndpoint+0x2ac>
 8005dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e017      	b.n	8005e16 <USB_ActivateEndpoint+0x2ea>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	663b      	str	r3, [r7, #96]	; 0x60
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <USB_ActivateEndpoint+0x2d4>
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	83fb      	strh	r3, [r7, #30]
 8005e24:	8bfb      	ldrh	r3, [r7, #30]
 8005e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01b      	beq.n	8005e66 <USB_ActivateEndpoint+0x33a>
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e44:	83bb      	strh	r3, [r7, #28]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8bbb      	ldrh	r3, [r7, #28]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	837b      	strh	r3, [r7, #26]
 8005e7e:	8b7b      	ldrh	r3, [r7, #26]
 8005e80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e84:	837b      	strh	r3, [r7, #26]
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e8c:	837b      	strh	r3, [r7, #26]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8b7b      	ldrh	r3, [r7, #26]
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]
 8005eae:	e1a2      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005efc:	4413      	add	r3, r2
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00da      	lsls	r2, r3, #3
 8005f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	891b      	ldrh	r3, [r3, #8]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	653b      	str	r3, [r7, #80]	; 0x50
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	4413      	add	r3, r2
 8005f32:	653b      	str	r3, [r7, #80]	; 0x50
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00da      	lsls	r2, r3, #3
 8005f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	895b      	ldrh	r3, [r3, #10]
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8091 	bne.w	8006080 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <USB_ActivateEndpoint+0x482>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01b      	beq.n	8005ffe <USB_ActivateEndpoint+0x4d2>
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006016:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006018:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800601c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800601e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006024:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	867b      	strh	r3, [r7, #50]	; 0x32
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e0ba      	b.n	80061f6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01d      	beq.n	80060d8 <USB_ActivateEndpoint+0x5ac>
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01d      	beq.n	8006130 <USB_ActivateEndpoint+0x604>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d024      	beq.n	8006182 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006156:	f083 0320 	eor.w	r3, r3, #32
 800615a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
 8006180:	e01d      	b.n	80061be <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80061f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	376c      	adds	r7, #108	; 0x6c
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006208:	b480      	push	{r7}
 800620a:	b08d      	sub	sp, #52	; 0x34
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 808e 	bne.w	8006338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d044      	beq.n	80062ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	81bb      	strh	r3, [r7, #12]
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <USB_DeactivateEndpoint+0x6c>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628a:	813b      	strh	r3, [r7, #8]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	893b      	ldrh	r3, [r7, #8]
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e192      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	827b      	strh	r3, [r7, #18]
 80062bc:	8a7b      	ldrh	r3, [r7, #18]
 80062be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01b      	beq.n	80062fe <USB_DeactivateEndpoint+0xf6>
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062dc:	823b      	strh	r3, [r7, #16]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	8a3b      	ldrh	r3, [r7, #16]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006314:	81fb      	strh	r3, [r7, #14]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]
 8006336:	e14d      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 80a5 	bne.w	800648c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	843b      	strh	r3, [r7, #32]
 8006350:	8c3b      	ldrh	r3, [r7, #32]
 8006352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <USB_DeactivateEndpoint+0x18a>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	83fb      	strh	r3, [r7, #30]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	83bb      	strh	r3, [r7, #28]
 80063a0:	8bbb      	ldrh	r3, [r7, #28]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01b      	beq.n	80063e2 <USB_DeactivateEndpoint+0x1da>
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c0:	837b      	strh	r3, [r7, #26]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8b7b      	ldrh	r3, [r7, #26]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	833b      	strh	r3, [r7, #24]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8b3b      	ldrh	r3, [r7, #24]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006430:	82fb      	strh	r3, [r7, #22]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8afb      	ldrh	r3, [r7, #22]
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	82bb      	strh	r3, [r7, #20]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8abb      	ldrh	r3, [r7, #20]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e0a3      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800649a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <USB_DeactivateEndpoint+0x2d4>
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <USB_DeactivateEndpoint+0x324>
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	853b      	strh	r3, [r7, #40]	; 0x28
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3734      	adds	r7, #52	; 0x34
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b0c4      	sub	sp, #272	; 0x110
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	6018      	str	r0, [r3, #0]
 80065ec:	463b      	mov	r3, r7
 80065ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	f040 8566 	bne.w	80070c8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065fc:	463b      	mov	r3, r7
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	d905      	bls.n	8006618 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006616:	e004      	b.n	8006622 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d12c      	bne.n	8006686 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6959      	ldr	r1, [r3, #20]
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	88da      	ldrh	r2, [r3, #6]
 8006638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663c:	b29b      	uxth	r3, r3
 800663e:	1d38      	adds	r0, r7, #4
 8006640:	6800      	ldr	r0, [r0, #0]
 8006642:	f001 fa43 	bl	8007acc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	4413      	add	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800666e:	f107 0310 	add.w	r3, r7, #16
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006678:	b29a      	uxth	r2, r3
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f000 bcec 	b.w	800705e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	78db      	ldrb	r3, [r3, #3]
 800668c:	2b02      	cmp	r3, #2
 800668e:	f040 8356 	bne.w	8006d3e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	f240 82fa 	bls.w	8006c98 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	1ad2      	subs	r2, r2, r3
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006704:	1d3b      	adds	r3, r7, #4
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 815e 	beq.w	80069dc <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d164      	bne.n	80067fa <USB_EPStartXfer+0x218>
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	4413      	add	r3, r2
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	4413      	add	r3, r2
 8006754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800675e:	2b00      	cmp	r3, #0
 8006760:	d112      	bne.n	8006788 <USB_EPStartXfer+0x1a6>
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676c:	b29a      	uxth	r2, r3
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e054      	b.n	8006832 <USB_EPStartXfer+0x250>
 8006788:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d817      	bhi.n	80067c0 <USB_EPStartXfer+0x1de>
 8006790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800679a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <USB_EPStartXfer+0x1ce>
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067aa:	3301      	adds	r3, #1
 80067ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e038      	b.n	8006832 <USB_EPStartXfer+0x250>
 80067c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0x1fe>
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e01b      	b.n	8006832 <USB_EPStartXfer+0x250>
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d116      	bne.n	8006832 <USB_EPStartXfer+0x250>
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	4413      	add	r3, r2
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	00da      	lsls	r2, r3, #3
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	4413      	add	r3, r2
 8006822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
 8006828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682c:	b29a      	uxth	r2, r3
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	895b      	ldrh	r3, [r3, #10]
 8006838:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6959      	ldr	r1, [r3, #20]
 8006842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006846:	b29b      	uxth	r3, r3
 8006848:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800684c:	1d38      	adds	r0, r7, #4
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	f001 f93c 	bl	8007acc <USB_WritePMA>
            ep->xfer_buff += len;
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685e:	441a      	add	r2, r3
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d90e      	bls.n	8006894 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006876:	463b      	mov	r3, r7
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	621a      	str	r2, [r3, #32]
 8006892:	e008      	b.n	80068a6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d164      	bne.n	800697a <USB_EPStartXfer+0x398>
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00da      	lsls	r2, r3, #3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d112      	bne.n	8006908 <USB_EPStartXfer+0x326>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006900:	b29a      	uxth	r2, r3
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e057      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690c:	2b3e      	cmp	r3, #62	; 0x3e
 800690e:	d817      	bhi.n	8006940 <USB_EPStartXfer+0x35e>
 8006910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800691a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <USB_EPStartXfer+0x34e>
 8006926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800692a:	3301      	adds	r3, #1
 800692c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006930:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29a      	uxth	r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e03b      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006940:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800694a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USB_EPStartXfer+0x37e>
 8006956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800695a:	3b01      	subs	r3, #1
 800695c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e01e      	b.n	80069b8 <USB_EPStartXfer+0x3d6>
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <USB_EPStartXfer+0x3d6>
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	4413      	add	r3, r2
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	891b      	ldrh	r3, [r3, #8]
 80069be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6959      	ldr	r1, [r3, #20]
 80069c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069d2:	1d38      	adds	r0, r7, #4
 80069d4:	6800      	ldr	r0, [r0, #0]
 80069d6:	f001 f879 	bl	8007acc <USB_WritePMA>
 80069da:	e340      	b.n	800705e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d164      	bne.n	8006ab0 <USB_EPStartXfer+0x4ce>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fa:	4413      	add	r3, r2
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00da      	lsls	r2, r3, #3
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d112      	bne.n	8006a3e <USB_EPStartXfer+0x45c>
 8006a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e057      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a42:	2b3e      	cmp	r3, #62	; 0x3e
 8006a44:	d817      	bhi.n	8006a76 <USB_EPStartXfer+0x494>
 8006a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <USB_EPStartXfer+0x484>
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e03b      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <USB_EPStartXfer+0x4b4>
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a90:	3b01      	subs	r3, #1
 8006a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e01e      	b.n	8006aee <USB_EPStartXfer+0x50c>
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d119      	bne.n	8006aee <USB_EPStartXfer+0x50c>
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ace:	4413      	add	r3, r2
 8006ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	891b      	ldrh	r3, [r3, #8]
 8006af4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6959      	ldr	r1, [r3, #20]
 8006afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b08:	1d38      	adds	r0, r7, #4
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	f000 ffde 	bl	8007acc <USB_WritePMA>
            ep->xfer_buff += len;
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b1a:	441a      	add	r2, r3
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b22:	463b      	mov	r3, r7
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d90e      	bls.n	8006b50 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a1a      	ldr	r2, [r3, #32]
 8006b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	621a      	str	r2, [r3, #32]
 8006b4e:	e008      	b.n	8006b62 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	647b      	str	r3, [r7, #68]	; 0x44
 8006b68:	463b      	mov	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d164      	bne.n	8006c3c <USB_EPStartXfer+0x65a>
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b86:	4413      	add	r3, r2
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	00da      	lsls	r2, r3, #3
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d112      	bne.n	8006bca <USB_EPStartXfer+0x5e8>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e054      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bce:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd0:	d817      	bhi.n	8006c02 <USB_EPStartXfer+0x620>
 8006bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <USB_EPStartXfer+0x610>
 8006be8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e038      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <USB_EPStartXfer+0x640>
 8006c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e01b      	b.n	8006c74 <USB_EPStartXfer+0x692>
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d116      	bne.n	8006c74 <USB_EPStartXfer+0x692>
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	4413      	add	r3, r2
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	00da      	lsls	r2, r3, #3
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	4413      	add	r3, r2
 8006c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	895b      	ldrh	r3, [r3, #10]
 8006c7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6959      	ldr	r1, [r3, #20]
 8006c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c8e:	1d38      	adds	r0, r7, #4
 8006c90:	6800      	ldr	r0, [r0, #0]
 8006c92:	f000 ff1b 	bl	8007acc <USB_WritePMA>
 8006c96:	e1e2      	b.n	800705e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	663b      	str	r3, [r7, #96]	; 0x60
 8006cec:	1d3b      	adds	r3, r7, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cfa:	4413      	add	r3, r2
 8006cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8006cfe:	463b      	mov	r3, r7
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6959      	ldr	r1, [r3, #20]
 8006d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006d34:	1d38      	adds	r0, r7, #4
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f000 fec8 	bl	8007acc <USB_WritePMA>
 8006d3c:	e18f      	b.n	800705e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 808f 	beq.w	8006e78 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d60:	463b      	mov	r3, r7
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d164      	bne.n	8006e34 <USB_EPStartXfer+0x852>
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7e:	4413      	add	r3, r2
 8006d80:	673b      	str	r3, [r7, #112]	; 0x70
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00da      	lsls	r2, r3, #3
 8006d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d112      	bne.n	8006dc2 <USB_EPStartXfer+0x7e0>
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e054      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc8:	d817      	bhi.n	8006dfa <USB_EPStartXfer+0x818>
 8006dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <USB_EPStartXfer+0x808>
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e038      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <USB_EPStartXfer+0x838>
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	3b01      	subs	r3, #1
 8006e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e01b      	b.n	8006e6c <USB_EPStartXfer+0x88a>
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d116      	bne.n	8006e6c <USB_EPStartXfer+0x88a>
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4c:	4413      	add	r3, r2
 8006e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e50:	463b      	mov	r3, r7
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e60:	677b      	str	r3, [r7, #116]	; 0x74
 8006e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	895b      	ldrh	r3, [r3, #10]
 8006e72:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006e76:	e097      	b.n	8006fa8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d168      	bne.n	8006f54 <USB_EPStartXfer+0x972>
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e8a:	1d3b      	adds	r3, r7, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	00da      	lsls	r2, r3, #3
 8006ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d112      	bne.n	8006ee2 <USB_EPStartXfer+0x900>
 8006ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e05d      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006ee2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee8:	d817      	bhi.n	8006f1a <USB_EPStartXfer+0x938>
 8006eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <USB_EPStartXfer+0x928>
 8006f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f04:	3301      	adds	r3, #1
 8006f06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e041      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USB_EPStartXfer+0x958>
 8006f30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e024      	b.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f54:	463b      	mov	r3, r7
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d11f      	bne.n	8006f9e <USB_EPStartXfer+0x9bc>
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f76:	4413      	add	r3, r2
 8006f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00da      	lsls	r2, r3, #3
 8006f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	891b      	ldrh	r3, [r3, #8]
 8006fa4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6959      	ldr	r1, [r3, #20]
 8006fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006fb8:	1d38      	adds	r0, r7, #4
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	f000 fd86 	bl	8007acc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d122      	bne.n	8007010 <USB_EPStartXfer+0xa2e>
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
 800700e:	e026      	b.n	800705e <USB_EPStartXfer+0xa7c>
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d121      	bne.n	800705e <USB_EPStartXfer+0xa7c>
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	463b      	mov	r3, r7
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007034:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800704a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f107 020e 	add.w	r2, r7, #14
 8007074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707c:	8013      	strh	r3, [r2, #0]
 800707e:	f107 030e 	add.w	r3, r7, #14
 8007082:	f107 020e 	add.w	r2, r7, #14
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	f082 0210 	eor.w	r2, r2, #16
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	f107 030e 	add.w	r3, r7, #14
 8007092:	f107 020e 	add.w	r2, r7, #14
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	f082 0220 	eor.w	r2, r2, #32
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	f107 030e 	add.w	r3, r7, #14
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]
 80070c6:	e3b5      	b.n	8007834 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	7b1b      	ldrb	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 8090 	bne.w	80071f4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	463b      	mov	r3, r7
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90e      	bls.n	8007102 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	619a      	str	r2, [r3, #24]
 8007100:	e008      	b.n	8007114 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007124:	b29b      	uxth	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800712c:	4413      	add	r3, r2
 800712e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	00da      	lsls	r2, r3, #3
 800713a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800713e:	4413      	add	r3, r2
 8007140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800714c:	2b00      	cmp	r3, #0
 800714e:	d116      	bne.n	800717e <USB_EPStartXfer+0xb9c>
 8007150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e32c      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 800717e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007182:	2b3e      	cmp	r3, #62	; 0x3e
 8007184:	d818      	bhi.n	80071b8 <USB_EPStartXfer+0xbd6>
 8007186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <USB_EPStartXfer+0xbc4>
 800719c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071a0:	3301      	adds	r3, #1
 80071a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	e30f      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 80071b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <USB_EPStartXfer+0xbf6>
 80071ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071dc:	b29b      	uxth	r3, r3
 80071de:	029b      	lsls	r3, r3, #10
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e2f1      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	78db      	ldrb	r3, [r3, #3]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	f040 818f 	bne.w	800751e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d175      	bne.n	80072f6 <USB_EPStartXfer+0xd14>
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007234:	4413      	add	r3, r2
 8007236:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800723e:	463b      	mov	r3, r7
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <USB_EPStartXfer+0xc94>
 8007248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e065      	b.n	8007342 <USB_EPStartXfer+0xd60>
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b3e      	cmp	r3, #62	; 0x3e
 800727e:	d81a      	bhi.n	80072b6 <USB_EPStartXfer+0xcd4>
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800728c:	463b      	mov	r3, r7
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <USB_EPStartXfer+0xcc2>
 800729a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e045      	b.n	8007342 <USB_EPStartXfer+0xd60>
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <USB_EPStartXfer+0xcf8>
 80072d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072d4:	3b01      	subs	r3, #1
 80072d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072de:	b29b      	uxth	r3, r3
 80072e0:	029b      	lsls	r3, r3, #10
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e025      	b.n	8007342 <USB_EPStartXfer+0xd60>
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d120      	bne.n	8007342 <USB_EPStartXfer+0xd60>
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007318:	4413      	add	r3, r2
 800731a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731e:	463b      	mov	r3, r7
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00da      	lsls	r2, r3, #3
 8007326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732a:	4413      	add	r3, r2
 800732c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d175      	bne.n	8007440 <USB_EPStartXfer+0xe5e>
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007364:	b29b      	uxth	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800736c:	4413      	add	r3, r2
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00da      	lsls	r2, r3, #3
 800737a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737e:	4413      	add	r3, r2
 8007380:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d116      	bne.n	80073c0 <USB_EPStartXfer+0xdde>
 8007392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e061      	b.n	8007484 <USB_EPStartXfer+0xea2>
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b3e      	cmp	r3, #62	; 0x3e
 80073c8:	d81a      	bhi.n	8007400 <USB_EPStartXfer+0xe1e>
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <USB_EPStartXfer+0xe0c>
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e041      	b.n	8007484 <USB_EPStartXfer+0xea2>
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800740c:	463b      	mov	r3, r7
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <USB_EPStartXfer+0xe42>
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741e:	3b01      	subs	r3, #1
 8007420:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	b29b      	uxth	r3, r3
 800742a:	029b      	lsls	r3, r3, #10
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e021      	b.n	8007484 <USB_EPStartXfer+0xea2>
 8007440:	463b      	mov	r3, r7
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11c      	bne.n	8007484 <USB_EPStartXfer+0xea2>
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800745a:	4413      	add	r3, r2
 800745c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	00da      	lsls	r2, r3, #3
 8007468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800746c:	4413      	add	r3, r2
 800746e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007476:	463b      	mov	r3, r7
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007482:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 81a4 	beq.w	80077d8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	463b      	mov	r3, r7
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <USB_EPStartXfer+0xeda>
 80074b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10d      	bne.n	80074d8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 8187 	bne.w	80077d8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 8180 	bne.w	80077d8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	441a      	add	r2, r3
 8007504:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
 800751c:	e15c      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	78db      	ldrb	r3, [r3, #3]
 8007524:	2b01      	cmp	r3, #1
 8007526:	f040 8155 	bne.w	80077d4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	463b      	mov	r3, r7
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d90e      	bls.n	8007558 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007544:	463b      	mov	r3, r7
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	463b      	mov	r3, r7
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	619a      	str	r2, [r3, #24]
 8007556:	e008      	b.n	800756a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007558:	463b      	mov	r3, r7
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007562:	463b      	mov	r3, r7
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d16f      	bne.n	8007654 <USB_EPStartXfer+0x1072>
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007584:	b29b      	uxth	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800758c:	4413      	add	r3, r2
 800758e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	00da      	lsls	r2, r3, #3
 800759a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800759e:	4413      	add	r3, r2
 80075a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d116      	bne.n	80075de <USB_EPStartXfer+0xffc>
 80075b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e05f      	b.n	800769e <USB_EPStartXfer+0x10bc>
 80075de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075e2:	2b3e      	cmp	r3, #62	; 0x3e
 80075e4:	d818      	bhi.n	8007618 <USB_EPStartXfer+0x1036>
 80075e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <USB_EPStartXfer+0x1024>
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	3301      	adds	r3, #1
 8007602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760a:	b29b      	uxth	r3, r3
 800760c:	029b      	lsls	r3, r3, #10
 800760e:	b29a      	uxth	r2, r3
 8007610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e042      	b.n	800769e <USB_EPStartXfer+0x10bc>
 8007618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <USB_EPStartXfer+0x1056>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	3b01      	subs	r3, #1
 8007634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	b29b      	uxth	r3, r3
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	b29b      	uxth	r3, r3
 8007642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	e024      	b.n	800769e <USB_EPStartXfer+0x10bc>
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d11f      	bne.n	800769e <USB_EPStartXfer+0x10bc>
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	00da      	lsls	r2, r3, #3
 8007684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007688:	4413      	add	r3, r2
 800768a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800768e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007692:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a6:	463b      	mov	r3, r7
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d16f      	bne.n	8007790 <USB_EPStartXfer+0x11ae>
 80076b0:	1d3b      	adds	r3, r7, #4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076c8:	4413      	add	r3, r2
 80076ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ce:	463b      	mov	r3, r7
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00da      	lsls	r2, r3, #3
 80076d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076da:	4413      	add	r3, r2
 80076dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <USB_EPStartXfer+0x1138>
 80076ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007710:	b29a      	uxth	r2, r3
 8007712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e05e      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 800771a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800771e:	2b3e      	cmp	r3, #62	; 0x3e
 8007720:	d818      	bhi.n	8007754 <USB_EPStartXfer+0x1172>
 8007722:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800772c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <USB_EPStartXfer+0x1160>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	3301      	adds	r3, #1
 800773e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29a      	uxth	r2, r3
 800774c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	e041      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 8007754:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800775e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <USB_EPStartXfer+0x1192>
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776e:	3b01      	subs	r3, #1
 8007770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007778:	b29b      	uxth	r3, r3
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	b29b      	uxth	r3, r3
 800777e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	e023      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
 8007790:	463b      	mov	r3, r7
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d11e      	bne.n	80077d8 <USB_EPStartXfer+0x11f6>
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077aa:	4413      	add	r3, r2
 80077ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077bc:	4413      	add	r3, r2
 80077be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e001      	b.n	80077d8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e02e      	b.n	8007836 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077d8:	1d3b      	adds	r3, r7, #4
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80077f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007802:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800780a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007868:	81bb      	strh	r3, [r7, #12]
 800786a:	89bb      	ldrh	r3, [r7, #12]
 800786c:	f083 0310 	eor.w	r3, r3, #16
 8007870:	81bb      	strh	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	89bb      	ldrh	r3, [r7, #12]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
 8007892:	e01f      	b.n	80078d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	81fb      	strh	r3, [r7, #14]
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078b2:	81fb      	strh	r3, [r7, #14]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	7b1b      	ldrb	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f040 809d 	bne.w	8007a30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d04c      	beq.n	8007998 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	823b      	strh	r3, [r7, #16]
 800790c:	8a3b      	ldrh	r3, [r7, #16]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01b      	beq.n	800794e <USB_EPClearStall+0x6c>
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	89fb      	ldrh	r3, [r7, #14]
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	78db      	ldrb	r3, [r3, #3]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d06c      	beq.n	8007a30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796c:	81bb      	strh	r3, [r7, #12]
 800796e:	89bb      	ldrh	r3, [r7, #12]
 8007970:	f083 0320 	eor.w	r3, r3, #32
 8007974:	81bb      	strh	r3, [r7, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]
 8007996:	e04b      	b.n	8007a30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	82fb      	strh	r3, [r7, #22]
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <USB_EPClearStall+0x106>
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	82bb      	strh	r3, [r7, #20]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	8abb      	ldrh	r3, [r7, #20]
 80079d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	827b      	strh	r3, [r7, #18]
 8007a00:	8a7b      	ldrh	r3, [r7, #18]
 8007a02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a06:	827b      	strh	r3, [r7, #18]
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a0e:	827b      	strh	r3, [r7, #18]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	8a7b      	ldrh	r3, [r7, #18]
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b08d      	sub	sp, #52	; 0x34
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	460b      	mov	r3, r1
 8007adc:	80fb      	strh	r3, [r7, #6]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ae2:	88bb      	ldrh	r3, [r7, #4]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b02:	e01b      	b.n	8007b3c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	3301      	adds	r3, #1
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e0      	bne.n	8007b04 <USB_WritePMA+0x38>
  }
}
 8007b42:	bf00      	nop
 8007b44:	3734      	adds	r7, #52	; 0x34
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b08b      	sub	sp, #44	; 0x2c
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	80fb      	strh	r3, [r7, #6]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b64:	88bb      	ldrh	r3, [r7, #4]
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
 8007b84:	e018      	b.n	8007bb8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	3302      	adds	r3, #2
 8007b92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007bbe:	88bb      	ldrh	r3, [r7, #4]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	701a      	strb	r2, [r3, #0]
  }
}
 8007bda:	bf00      	nop
 8007bdc:	372c      	adds	r7, #44	; 0x2c
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bf2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bf6:	f002 f847 	bl	8009c88 <USBD_static_malloc>
 8007bfa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e066      	b.n	8007cdc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7c1b      	ldrb	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d119      	bne.n	8007c52 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c22:	2202      	movs	r2, #2
 8007c24:	2181      	movs	r1, #129	; 0x81
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fed3 	bl	80099d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c36:	2202      	movs	r2, #2
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fec9 	bl	80099d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c50:	e016      	b.n	8007c80 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c52:	2340      	movs	r3, #64	; 0x40
 8007c54:	2202      	movs	r2, #2
 8007c56:	2181      	movs	r1, #129	; 0x81
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 feba 	bl	80099d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c64:	2340      	movs	r3, #64	; 0x40
 8007c66:	2202      	movs	r2, #2
 8007c68:	2101      	movs	r1, #1
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 feb1 	bl	80099d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c80:	2308      	movs	r3, #8
 8007c82:	2203      	movs	r2, #3
 8007c84:	2182      	movs	r1, #130	; 0x82
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fea3 	bl	80099d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7c1b      	ldrb	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 ff75 	bl	8009bb2 <USBD_LL_PrepareReceive>
 8007cc8:	e007      	b.n	8007cda <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 ff6c 	bl	8009bb2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cf0:	2181      	movs	r1, #129	; 0x81
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fe93 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fe8c 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d0e:	2182      	movs	r1, #130	; 0x82
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fe84 	bl	8009a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 ffaf 	bl	8009ca4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d68:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d03a      	beq.n	8007df8 <USBD_CDC_Setup+0xa0>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	f040 8097 	bne.w	8007eb6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	88db      	ldrh	r3, [r3, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d029      	beq.n	8007de4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da11      	bge.n	8007dbe <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007da6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	88d2      	ldrh	r2, [r2, #6]
 8007dac:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dae:	6939      	ldr	r1, [r7, #16]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fa5d 	bl	8009276 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007dbc:	e082      	b.n	8007ec4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	785a      	ldrb	r2, [r3, #1]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	88db      	ldrh	r3, [r3, #6]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dd4:	6939      	ldr	r1, [r7, #16]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fa76 	bl	80092ce <USBD_CtlPrepareRx>
      break;
 8007de2:	e06f      	b.n	8007ec4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	7850      	ldrb	r0, [r2, #1]
 8007df0:	2200      	movs	r2, #0
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	4798      	blx	r3
      break;
 8007df6:	e065      	b.n	8007ec4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b0b      	cmp	r3, #11
 8007dfe:	d84f      	bhi.n	8007ea0 <USBD_CDC_Setup+0x148>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <USBD_CDC_Setup+0xb0>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e39 	.word	0x08007e39
 8007e0c:	08007eaf 	.word	0x08007eaf
 8007e10:	08007ea1 	.word	0x08007ea1
 8007e14:	08007ea1 	.word	0x08007ea1
 8007e18:	08007ea1 	.word	0x08007ea1
 8007e1c:	08007ea1 	.word	0x08007ea1
 8007e20:	08007ea1 	.word	0x08007ea1
 8007e24:	08007ea1 	.word	0x08007ea1
 8007e28:	08007ea1 	.word	0x08007ea1
 8007e2c:	08007ea1 	.word	0x08007ea1
 8007e30:	08007e61 	.word	0x08007e61
 8007e34:	08007e89 	.word	0x08007e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d107      	bne.n	8007e52 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e42:	f107 030c 	add.w	r3, r7, #12
 8007e46:	2202      	movs	r2, #2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fa13 	bl	8009276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e50:	e030      	b.n	8007eb4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 f99d 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e5e:	e029      	b.n	8007eb4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d107      	bne.n	8007e7a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e6a:	f107 030f 	add.w	r3, r7, #15
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 f9ff 	bl	8009276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e78:	e01c      	b.n	8007eb4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f989 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	75fb      	strb	r3, [r7, #23]
          break;
 8007e86:	e015      	b.n	8007eb4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d00f      	beq.n	8007eb2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f97d 	bl	8009194 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e9e:	e008      	b.n	8007eb2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 f976 	bl	8009194 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	75fb      	strb	r3, [r7, #23]
          break;
 8007eac:	e002      	b.n	8007eb4 <USBD_CDC_Setup+0x15c>
          break;
 8007eae:	bf00      	nop
 8007eb0:	e008      	b.n	8007ec4 <USBD_CDC_Setup+0x16c>
          break;
 8007eb2:	bf00      	nop
      }
      break;
 8007eb4:	e006      	b.n	8007ec4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 f96b 	bl	8009194 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop

08007ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e04f      	b.n	8007f92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3318      	adds	r3, #24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d029      	beq.n	8007f64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3318      	adds	r3, #24
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	78f9      	ldrb	r1, [r7, #3]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	460b      	mov	r3, r1
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4403      	add	r3, r0
 8007f30:	3338      	adds	r3, #56	; 0x38
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f38:	fb03 f301 	mul.w	r3, r3, r1
 8007f3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d110      	bne.n	8007f64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3318      	adds	r3, #24
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f56:	78f9      	ldrb	r1, [r7, #3]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fe07 	bl	8009b70 <USBD_LL_Transmit>
 8007f62:	e015      	b.n	8007f90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e015      	b.n	8007fe8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fe17 	bl	8009bf4 <USBD_LL_GetRxDataSize>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d015      	beq.n	8008036 <USBD_CDC_EP0_RxReady+0x46>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	d010      	beq.n	8008036 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008022:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800802a:	b292      	uxth	r2, r2
 800802c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2243      	movs	r2, #67	; 0x43
 800804c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	; (800805c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	2000009c 	.word	0x2000009c

08008060 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2243      	movs	r2, #67	; 0x43
 800806c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000058 	.word	0x20000058

08008080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2243      	movs	r2, #67	; 0x43
 800808c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800808e:	4b03      	ldr	r3, [pc, #12]	; (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200000e0 	.word	0x200000e0

080080a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220a      	movs	r2, #10
 80080ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	; (80080bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000014 	.word	0x20000014

080080c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e004      	b.n	80080de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800815e:	2303      	movs	r3, #3
 8008160:	e016      	b.n	8008190 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	7c1b      	ldrb	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008174:	2101      	movs	r1, #1
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 fd1b 	bl	8009bb2 <USBD_LL_PrepareReceive>
 800817c:	e007      	b.n	800818e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	2101      	movs	r1, #1
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fd12 	bl	8009bb2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e01f      	b.n	80081f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	79fa      	ldrb	r2, [r7, #7]
 80081e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f001 fb79 	bl	80098dc <USBD_LL_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	e016      	b.n	800823e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	f107 020e 	add.w	r2, r7, #14
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	4602      	mov	r2, r0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 fba4 	bl	800999c <USBD_LL_Start>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	4611      	mov	r1, r2
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
  }

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 ff16 	bl	8009120 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2b01      	cmp	r3, #1
 8008316:	d00e      	beq.n	8008336 <USBD_LL_SetupStage+0x5a>
 8008318:	2b01      	cmp	r3, #1
 800831a:	d302      	bcc.n	8008322 <USBD_LL_SetupStage+0x46>
 800831c:	2b02      	cmp	r3, #2
 800831e:	d014      	beq.n	800834a <USBD_LL_SetupStage+0x6e>
 8008320:	e01d      	b.n	800835e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9d6 	bl	80086dc <USBD_StdDevReq>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
      break;
 8008334:	e020      	b.n	8008378 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa3a 	bl	80087b8 <USBD_StdItfReq>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e016      	b.n	8008378 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa76 	bl	8008844 <USBD_StdEPReq>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
      break;
 800835c:	e00c      	b.n	8008378 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008368:	b2db      	uxtb	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fb75 	bl	8009a5c <USBD_LL_StallEP>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
      break;
 8008376:	bf00      	nop
  }

  return ret;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	460b      	mov	r3, r1
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d137      	bne.n	8008406 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800839c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d14a      	bne.n	800843e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d913      	bls.n	80083dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	1ad2      	subs	r2, r2, r3
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	bf28      	it	cs
 80083ce:	4613      	movcs	r3, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 ff97 	bl	8009308 <USBD_CtlContinueRx>
 80083da:	e030      	b.n	800843e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d105      	bne.n	80083fe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 ff93 	bl	800932a <USBD_CtlSendStatus>
 8008404:	e01b      	b.n	800843e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d013      	beq.n	800843a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008418:	2b03      	cmp	r3, #3
 800841a:	d10e      	bne.n	800843a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	7afa      	ldrb	r2, [r7, #11]
 8008426:	4611      	mov	r1, r2
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	4798      	blx	r3
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	e002      	b.n	8008440 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	e000      	b.n	8008440 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	460b      	mov	r3, r1
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d16a      	bne.n	8008532 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3314      	adds	r3, #20
 8008460:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008468:	2b02      	cmp	r3, #2
 800846a:	d155      	bne.n	8008518 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	429a      	cmp	r2, r3
 8008476:	d914      	bls.n	80084a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	1ad2      	subs	r2, r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	461a      	mov	r2, r3
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 ff0c 	bl	80092ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008494:	2300      	movs	r3, #0
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 fb89 	bl	8009bb2 <USBD_LL_PrepareReceive>
 80084a0:	e03a      	b.n	8008518 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d11c      	bne.n	80084e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d316      	bcc.n	80084e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d20f      	bcs.n	80084e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 feed 	bl	80092ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084da:	2300      	movs	r3, #0
 80084dc:	2200      	movs	r2, #0
 80084de:	2100      	movs	r1, #0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 fb66 	bl	8009bb2 <USBD_LL_PrepareReceive>
 80084e6:	e017      	b.n	8008518 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d105      	bne.n	800850a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 faa5 	bl	8009a5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 ff1c 	bl	8009350 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d123      	bne.n	800856a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff fe9b 	bl	800825e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008530:	e01b      	b.n	800856a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d013      	beq.n	8008566 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008544:	2b03      	cmp	r3, #3
 8008546:	d10e      	bne.n	8008566 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	7afa      	ldrb	r2, [r7, #11]
 8008552:	4611      	mov	r1, r2
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	e002      	b.n	800856c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	e000      	b.n	800856c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6852      	ldr	r2, [r2, #4]
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	4611      	mov	r1, r2
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fa07 	bl	80099d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2240      	movs	r2, #64	; 0x40
 80085d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	2200      	movs	r2, #0
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f9f9 	bl	80099d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2240      	movs	r2, #64	; 0x40
 80085ea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864e:	2b04      	cmp	r3, #4
 8008650:	d105      	bne.n	800865e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b03      	cmp	r3, #3
 800867c:	d10b      	bne.n	8008696 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	3301      	adds	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086be:	8a3b      	ldrh	r3, [r7, #16]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	b21a      	sxth	r2, r3
 80086c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b21b      	sxth	r3, r3
 80086cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086ce:	89fb      	ldrh	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	d004      	beq.n	8008700 <USBD_StdDevReq+0x24>
 80086f6:	2b40      	cmp	r3, #64	; 0x40
 80086f8:	d002      	beq.n	8008700 <USBD_StdDevReq+0x24>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <USBD_StdDevReq+0x38>
 80086fe:	e050      	b.n	80087a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e04b      	b.n	80087ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	2b09      	cmp	r3, #9
 800871a:	d83c      	bhi.n	8008796 <USBD_StdDevReq+0xba>
 800871c:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBD_StdDevReq+0x48>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008779 	.word	0x08008779
 8008728:	0800878d 	.word	0x0800878d
 800872c:	08008797 	.word	0x08008797
 8008730:	08008783 	.word	0x08008783
 8008734:	08008797 	.word	0x08008797
 8008738:	08008757 	.word	0x08008757
 800873c:	0800874d 	.word	0x0800874d
 8008740:	08008797 	.word	0x08008797
 8008744:	0800876f 	.word	0x0800876f
 8008748:	08008761 	.word	0x08008761
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9d0 	bl	8008af4 <USBD_GetDescriptor>
      break;
 8008754:	e024      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fb5f 	bl	8008e1c <USBD_SetAddress>
      break;
 800875e:	e01f      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fb9c 	bl	8008ea0 <USBD_SetConfig>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
      break;
 800876c:	e018      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fc39 	bl	8008fe8 <USBD_GetConfig>
      break;
 8008776:	e013      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fc68 	bl	8009050 <USBD_GetStatus>
      break;
 8008780:	e00e      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fc96 	bl	80090b6 <USBD_SetFeature>
      break;
 800878a:	e009      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fca5 	bl	80090de <USBD_ClrFeature>
      break;
 8008794:	e004      	b.n	80087a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fcfb 	bl	8009194 <USBD_CtlError>
      break;
 800879e:	bf00      	nop
    }
    break;
 80087a0:	e004      	b.n	80087ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fcf5 	bl	8009194 <USBD_CtlError>
    break;
 80087aa:	bf00      	nop
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d003      	beq.n	80087da <USBD_StdItfReq+0x22>
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	d001      	beq.n	80087da <USBD_StdItfReq+0x22>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d12a      	bne.n	8008830 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e0:	3b01      	subs	r3, #1
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d81d      	bhi.n	8008822 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	889b      	ldrh	r3, [r3, #4]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d813      	bhi.n	8008818 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	88db      	ldrh	r3, [r3, #6]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d110      	bne.n	800882c <USBD_StdItfReq+0x74>
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10d      	bne.n	800882c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fd8a 	bl	800932a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008816:	e009      	b.n	800882c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fcba 	bl	8009194 <USBD_CtlError>
      break;
 8008820:	e004      	b.n	800882c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fcb5 	bl	8009194 <USBD_CtlError>
      break;
 800882a:	e000      	b.n	800882e <USBD_StdItfReq+0x76>
      break;
 800882c:	bf00      	nop
    }
    break;
 800882e:	e004      	b.n	800883a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fcae 	bl	8009194 <USBD_CtlError>
    break;
 8008838:	bf00      	nop
  }

  return ret;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	889b      	ldrh	r3, [r3, #4]
 8008856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008860:	2b20      	cmp	r3, #32
 8008862:	d004      	beq.n	800886e <USBD_StdEPReq+0x2a>
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d002      	beq.n	800886e <USBD_StdEPReq+0x2a>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <USBD_StdEPReq+0x3e>
 800886c:	e137      	b.n	8008ade <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	4798      	blx	r3
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
    break;
 8008880:	e132      	b.n	8008ae8 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d03e      	beq.n	8008908 <USBD_StdEPReq+0xc4>
 800888a:	2b03      	cmp	r3, #3
 800888c:	d002      	beq.n	8008894 <USBD_StdEPReq+0x50>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d079      	beq.n	8008986 <USBD_StdEPReq+0x142>
 8008892:	e11e      	b.n	8008ad2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889a:	2b02      	cmp	r3, #2
 800889c:	d002      	beq.n	80088a4 <USBD_StdEPReq+0x60>
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d015      	beq.n	80088ce <USBD_StdEPReq+0x8a>
 80088a2:	e02b      	b.n	80088fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00c      	beq.n	80088c4 <USBD_StdEPReq+0x80>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d009      	beq.n	80088c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f8d1 	bl	8009a5c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	; 0x80
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f8cd 	bl	8009a5c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80088c2:	e020      	b.n	8008906 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc64 	bl	8009194 <USBD_CtlError>
        break;
 80088cc:	e01b      	b.n	8008906 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10e      	bne.n	80088f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_StdEPReq+0xb0>
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d008      	beq.n	80088f4 <USBD_StdEPReq+0xb0>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	88db      	ldrh	r3, [r3, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f8b4 	bl	8009a5c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd18 	bl	800932a <USBD_CtlSendStatus>

        break;
 80088fa:	e004      	b.n	8008906 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fc48 	bl	8009194 <USBD_CtlError>
        break;
 8008904:	bf00      	nop
      }
      break;
 8008906:	e0e9      	b.n	8008adc <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	2b02      	cmp	r3, #2
 8008910:	d002      	beq.n	8008918 <USBD_StdEPReq+0xd4>
 8008912:	2b03      	cmp	r3, #3
 8008914:	d015      	beq.n	8008942 <USBD_StdEPReq+0xfe>
 8008916:	e02f      	b.n	8008978 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00c      	beq.n	8008938 <USBD_StdEPReq+0xf4>
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d009      	beq.n	8008938 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f897 	bl	8009a5c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800892e:	2180      	movs	r1, #128	; 0x80
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f893 	bl	8009a5c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008936:	e025      	b.n	8008984 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fc2a 	bl	8009194 <USBD_CtlError>
        break;
 8008940:	e020      	b.n	8008984 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d11b      	bne.n	8008982 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 f89e 	bl	8009a9a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fce3 	bl	800932a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008976:	e004      	b.n	8008982 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc0a 	bl	8009194 <USBD_CtlError>
        break;
 8008980:	e000      	b.n	8008984 <USBD_StdEPReq+0x140>
        break;
 8008982:	bf00      	nop
      }
      break;
 8008984:	e0aa      	b.n	8008adc <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	2b02      	cmp	r3, #2
 800898e:	d002      	beq.n	8008996 <USBD_StdEPReq+0x152>
 8008990:	2b03      	cmp	r3, #3
 8008992:	d032      	beq.n	80089fa <USBD_StdEPReq+0x1b6>
 8008994:	e097      	b.n	8008ac6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <USBD_StdEPReq+0x168>
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	d004      	beq.n	80089ac <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fbf5 	bl	8009194 <USBD_CtlError>
          break;
 80089aa:	e091      	b.n	8008ad0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	da0b      	bge.n	80089cc <USBD_StdEPReq+0x188>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	3310      	adds	r3, #16
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	4413      	add	r3, r2
 80089c8:	3304      	adds	r3, #4
 80089ca:	e00b      	b.n	80089e4 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	3304      	adds	r3, #4
 80089e4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2202      	movs	r2, #2
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fc3f 	bl	8009276 <USBD_CtlSendData>
        break;
 80089f8:	e06a      	b.n	8008ad0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80089fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da11      	bge.n	8008a26 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	3324      	adds	r3, #36	; 0x24
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d117      	bne.n	8008a4c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fbb8 	bl	8009194 <USBD_CtlError>
            break;
 8008a24:	e054      	b.n	8008ad0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	f003 020f 	and.w	r2, r3, #15
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d104      	bne.n	8008a4c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fba5 	bl	8009194 <USBD_CtlError>
            break;
 8008a4a:	e041      	b.n	8008ad0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	da0b      	bge.n	8008a6c <USBD_StdEPReq+0x228>
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	3310      	adds	r3, #16
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4413      	add	r3, r2
 8008a68:	3304      	adds	r3, #4
 8008a6a:	e00b      	b.n	8008a84 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	3304      	adds	r3, #4
 8008a84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <USBD_StdEPReq+0x24e>
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b80      	cmp	r3, #128	; 0x80
 8008a90:	d103      	bne.n	8008a9a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e00e      	b.n	8008ab8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f81a 	bl	8009ad8 <USBD_LL_IsStallEP>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	e002      	b.n	8008ab8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2202      	movs	r2, #2
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fbd9 	bl	8009276 <USBD_CtlSendData>
          break;
 8008ac4:	e004      	b.n	8008ad0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb63 	bl	8009194 <USBD_CtlError>
        break;
 8008ace:	bf00      	nop
      }
      break;
 8008ad0:	e004      	b.n	8008adc <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fb5d 	bl	8009194 <USBD_CtlError>
      break;
 8008ada:	bf00      	nop
    }
    break;
 8008adc:	e004      	b.n	8008ae8 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fb57 	bl	8009194 <USBD_CtlError>
    break;
 8008ae6:	bf00      	nop
  }

  return ret;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	0a1b      	lsrs	r3, r3, #8
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	2b0e      	cmp	r3, #14
 8008b16:	f200 8152 	bhi.w	8008dbe <USBD_GetDescriptor+0x2ca>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <USBD_GetDescriptor+0x2c>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b91 	.word	0x08008b91
 8008b24:	08008ba9 	.word	0x08008ba9
 8008b28:	08008be9 	.word	0x08008be9
 8008b2c:	08008dbf 	.word	0x08008dbf
 8008b30:	08008dbf 	.word	0x08008dbf
 8008b34:	08008d5f 	.word	0x08008d5f
 8008b38:	08008d8b 	.word	0x08008d8b
 8008b3c:	08008dbf 	.word	0x08008dbf
 8008b40:	08008dbf 	.word	0x08008dbf
 8008b44:	08008dbf 	.word	0x08008dbf
 8008b48:	08008dbf 	.word	0x08008dbf
 8008b4c:	08008dbf 	.word	0x08008dbf
 8008b50:	08008dbf 	.word	0x08008dbf
 8008b54:	08008dbf 	.word	0x08008dbf
 8008b58:	08008b5d 	.word	0x08008b5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7c12      	ldrb	r2, [r2, #16]
 8008b74:	f107 0108 	add.w	r1, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b7e:	e126      	b.n	8008dce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb06 	bl	8009194 <USBD_CtlError>
      err++;
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	72fb      	strb	r3, [r7, #11]
    break;
 8008b8e:	e11e      	b.n	8008dce <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
    break;
 8008ba6:	e112      	b.n	8008dce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7c1b      	ldrb	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10d      	bne.n	8008bcc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	f107 0208 	add.w	r2, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008bca:	e100      	b.n	8008dce <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	f107 0208 	add.w	r2, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
    break;
 8008be6:	e0f2      	b.n	8008dce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	f200 80ac 	bhi.w	8008d4c <USBD_GetDescriptor+0x258>
 8008bf4:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <USBD_GetDescriptor+0x108>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c49 	.word	0x08008c49
 8008c04:	08008c7d 	.word	0x08008c7d
 8008c08:	08008cb1 	.word	0x08008cb1
 8008c0c:	08008ce5 	.word	0x08008ce5
 8008c10:	08008d19 	.word	0x08008d19
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c36:	e091      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 faaa 	bl	8009194 <USBD_CtlError>
        err++;
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	3301      	adds	r3, #1
 8008c44:	72fb      	strb	r3, [r7, #11]
      break;
 8008c46:	e089      	b.n	8008d5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c6a:	e077      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa90 	bl	8009194 <USBD_CtlError>
        err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
      break;
 8008c7a:	e06f      	b.n	8008d5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c9e:	e05d      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa76 	bl	8009194 <USBD_CtlError>
        err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
      break;
 8008cae:	e055      	b.n	8008d5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd2:	e043      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa5c 	bl	8009194 <USBD_CtlError>
        err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce2:	e03b      	b.n	8008d5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d06:	e029      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa42 	bl	8009194 <USBD_CtlError>
        err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
      break;
 8008d16:	e021      	b.n	8008d5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d3a:	e00f      	b.n	8008d5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa28 	bl	8009194 <USBD_CtlError>
        err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
      break;
 8008d4a:	e007      	b.n	8008d5c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa20 	bl	8009194 <USBD_CtlError>
      err++;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	3301      	adds	r3, #1
 8008d58:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d5a:	bf00      	nop
    }
    break;
 8008d5c:	e037      	b.n	8008dce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7c1b      	ldrb	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6e:	f107 0208 	add.w	r2, r7, #8
 8008d72:	4610      	mov	r0, r2
 8008d74:	4798      	blx	r3
 8008d76:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d78:	e029      	b.n	8008dce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa09 	bl	8009194 <USBD_CtlError>
      err++;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	3301      	adds	r3, #1
 8008d86:	72fb      	strb	r3, [r7, #11]
    break;
 8008d88:	e021      	b.n	8008dce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7c1b      	ldrb	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	f107 0208 	add.w	r2, r7, #8
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4798      	blx	r3
 8008da2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	2207      	movs	r2, #7
 8008daa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008dac:	e00f      	b.n	8008dce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9ef 	bl	8009194 <USBD_CtlError>
      err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
    break;
 8008dbc:	e007      	b.n	8008dce <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9e7 	bl	8009194 <USBD_CtlError>
    err++;
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	72fb      	strb	r3, [r7, #11]
    break;
 8008dcc:	bf00      	nop
  }

  if (err != 0U)
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11e      	bne.n	8008e12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	88db      	ldrh	r3, [r3, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d016      	beq.n	8008e0a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ddc:	893b      	ldrh	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88da      	ldrh	r2, [r3, #6]
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	bf28      	it	cs
 8008dec:	4613      	movcs	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008df2:	893b      	ldrh	r3, [r7, #8]
 8008df4:	461a      	mov	r2, r3
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa3c 	bl	8009276 <USBD_CtlSendData>
 8008dfe:	e009      	b.n	8008e14 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9c6 	bl	8009194 <USBD_CtlError>
 8008e08:	e004      	b.n	8008e14 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa8d 	bl	800932a <USBD_CtlSendStatus>
 8008e10:	e000      	b.n	8008e14 <USBD_GetDescriptor+0x320>
    return;
 8008e12:	bf00      	nop
    }
  }
}
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop

08008e1c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d130      	bne.n	8008e90 <USBD_SetAddress+0x74>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	88db      	ldrh	r3, [r3, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d12c      	bne.n	8008e90 <USBD_SetAddress+0x74>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e3c:	d828      	bhi.n	8008e90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d104      	bne.n	8008e5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f99c 	bl	8009194 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5c:	e01c      	b.n	8008e98 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fe61 	bl	8009b32 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa5a 	bl	800932a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e84:	e008      	b.n	8008e98 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	e003      	b.n	8008e98 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f97e 	bl	8009194 <USBD_CtlError>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	4b4b      	ldr	r3, [pc, #300]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008eb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008eb8:	4b4a      	ldr	r3, [pc, #296]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d905      	bls.n	8008ecc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f966 	bl	8009194 <USBD_CtlError>
    return USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e087      	b.n	8008fdc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d002      	beq.n	8008edc <USBD_SetConfig+0x3c>
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d025      	beq.n	8008f26 <USBD_SetConfig+0x86>
 8008eda:	e071      	b.n	8008fc0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008edc:	4b41      	ldr	r3, [pc, #260]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01c      	beq.n	8008f1e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008ee4:	4b3f      	ldr	r3, [pc, #252]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008eee:	4b3d      	ldr	r3, [pc, #244]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff f9bd 	bl	8008274 <USBD_SetClassConfig>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f944 	bl	8009194 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f0c:	e065      	b.n	8008fda <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa0b 	bl	800932a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2203      	movs	r2, #3
 8008f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f1c:	e05d      	b.n	8008fda <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa03 	bl	800932a <USBD_CtlSendStatus>
    break;
 8008f24:	e059      	b.n	8008fda <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f26:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d112      	bne.n	8008f54 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f36:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff f9b0 	bl	80082ac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9ec 	bl	800932a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f52:	e042      	b.n	8008fda <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f54:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d02a      	beq.n	8008fb8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff f99e 	bl	80082ac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f7a:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff f977 	bl	8008274 <USBD_SetClassConfig>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00f      	beq.n	8008fb0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8fe 	bl	8009194 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff f983 	bl	80082ac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fae:	e014      	b.n	8008fda <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9ba 	bl	800932a <USBD_CtlSendStatus>
    break;
 8008fb6:	e010      	b.n	8008fda <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f9b6 	bl	800932a <USBD_CtlSendStatus>
    break;
 8008fbe:	e00c      	b.n	8008fda <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f8e6 	bl	8009194 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <USBD_SetConfig+0x144>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff f96c 	bl	80082ac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd8:	bf00      	nop
  }

  return ret;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200001b0 	.word	0x200001b0

08008fe8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	88db      	ldrh	r3, [r3, #6]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d004      	beq.n	8009004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8c9 	bl	8009194 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009002:	e021      	b.n	8009048 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900a:	2b01      	cmp	r3, #1
 800900c:	db17      	blt.n	800903e <USBD_GetConfig+0x56>
 800900e:	2b02      	cmp	r3, #2
 8009010:	dd02      	ble.n	8009018 <USBD_GetConfig+0x30>
 8009012:	2b03      	cmp	r3, #3
 8009014:	d00b      	beq.n	800902e <USBD_GetConfig+0x46>
 8009016:	e012      	b.n	800903e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3308      	adds	r3, #8
 8009022:	2201      	movs	r2, #1
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f925 	bl	8009276 <USBD_CtlSendData>
      break;
 800902c:	e00c      	b.n	8009048 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	2201      	movs	r2, #1
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f91d 	bl	8009276 <USBD_CtlSendData>
      break;
 800903c:	e004      	b.n	8009048 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8a7 	bl	8009194 <USBD_CtlError>
      break;
 8009046:	bf00      	nop
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	3b01      	subs	r3, #1
 8009062:	2b02      	cmp	r3, #2
 8009064:	d81e      	bhi.n	80090a4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	88db      	ldrh	r3, [r3, #6]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d004      	beq.n	8009078 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f88f 	bl	8009194 <USBD_CtlError>
      break;
 8009076:	e01a      	b.n	80090ae <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f043 0202 	orr.w	r2, r3, #2
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	330c      	adds	r3, #12
 8009098:	2202      	movs	r2, #2
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f8ea 	bl	8009276 <USBD_CtlSendData>
    break;
 80090a2:	e004      	b.n	80090ae <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f874 	bl	8009194 <USBD_CtlError>
    break;
 80090ac:	bf00      	nop
  }
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d106      	bne.n	80090d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f92a 	bl	800932a <USBD_CtlSendStatus>
  }
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d80b      	bhi.n	800910c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	885b      	ldrh	r3, [r3, #2]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10c      	bne.n	8009116 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f910 	bl	800932a <USBD_CtlSendStatus>
      }
      break;
 800910a:	e004      	b.n	8009116 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f840 	bl	8009194 <USBD_CtlError>
      break;
 8009114:	e000      	b.n	8009118 <USBD_ClrFeature+0x3a>
      break;
 8009116:	bf00      	nop
  }
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff faa8 	bl	80086a0 <SWAPBYTE>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fa9b 	bl	80086a0 <SWAPBYTE>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff fa8e 	bl	80086a0 <SWAPBYTE>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	80da      	strh	r2, [r3, #6]
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800919e:	2180      	movs	r1, #128	; 0x80
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc5b 	bl	8009a5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091a6:	2100      	movs	r1, #0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fc57 	bl	8009a5c <USBD_LL_StallEP>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d036      	beq.n	800923a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091d0:	6938      	ldr	r0, [r7, #16]
 80091d2:	f000 f836 	bl	8009242 <USBD_GetLen>
 80091d6:	4603      	mov	r3, r0
 80091d8:	3301      	adds	r3, #1
 80091da:	b29b      	uxth	r3, r3
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	7812      	ldrb	r2, [r2, #0]
 80091ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4413      	add	r3, r2
 80091fc:	2203      	movs	r2, #3
 80091fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	3301      	adds	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009206:	e013      	b.n	8009230 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	3301      	adds	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
    idx++;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
    idx++;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	3301      	adds	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e7      	bne.n	8009208 <USBD_GetString+0x52>
 8009238:	e000      	b.n	800923c <USBD_GetString+0x86>
    return;
 800923a:	bf00      	nop
  }
}
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009252:	e005      	b.n	8009260 <USBD_GetLen+0x1e>
  {
    len++;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	3301      	adds	r3, #1
 8009258:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3301      	adds	r3, #1
 800925e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f5      	bne.n	8009254 <USBD_GetLen+0x12>
  }

  return len;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2202      	movs	r2, #2
 8009286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fc67 	bl	8009b70 <USBD_LL_Transmit>

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fc56 	bl	8009b70 <USBD_LL_Transmit>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2203      	movs	r2, #3
 80092de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	2100      	movs	r1, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fc5a 	bl	8009bb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	2100      	movs	r1, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fc49 	bl	8009bb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2204      	movs	r2, #4
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800933a:	2300      	movs	r3, #0
 800933c:	2200      	movs	r2, #0
 800933e:	2100      	movs	r1, #0
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fc15 	bl	8009b70 <USBD_LL_Transmit>

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2205      	movs	r2, #5
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc23 	bl	8009bb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800937c:	2200      	movs	r2, #0
 800937e:	4912      	ldr	r1, [pc, #72]	; (80093c8 <MX_USB_Device_Init+0x50>)
 8009380:	4812      	ldr	r0, [pc, #72]	; (80093cc <MX_USB_Device_Init+0x54>)
 8009382:	f7fe ff09 	bl	8008198 <USBD_Init>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800938c:	f7f8 fa74 	bl	8001878 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009390:	490f      	ldr	r1, [pc, #60]	; (80093d0 <MX_USB_Device_Init+0x58>)
 8009392:	480e      	ldr	r0, [pc, #56]	; (80093cc <MX_USB_Device_Init+0x54>)
 8009394:	f7fe ff30 	bl	80081f8 <USBD_RegisterClass>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800939e:	f7f8 fa6b 	bl	8001878 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80093a2:	490c      	ldr	r1, [pc, #48]	; (80093d4 <MX_USB_Device_Init+0x5c>)
 80093a4:	4809      	ldr	r0, [pc, #36]	; (80093cc <MX_USB_Device_Init+0x54>)
 80093a6:	f7fe fe8b 	bl	80080c0 <USBD_CDC_RegisterInterface>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80093b0:	f7f8 fa62 	bl	8001878 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093b4:	4805      	ldr	r0, [pc, #20]	; (80093cc <MX_USB_Device_Init+0x54>)
 80093b6:	f7fe ff46 	bl	8008246 <USBD_Start>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80093c0:	f7f8 fa5a 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093c4:	bf00      	nop
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000138 	.word	0x20000138
 80093cc:	2000066c 	.word	0x2000066c
 80093d0:	20000020 	.word	0x20000020
 80093d4:	20000124 	.word	0x20000124

080093d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	4905      	ldr	r1, [pc, #20]	; (80093f4 <CDC_Init_FS+0x1c>)
 80093e0:	4805      	ldr	r0, [pc, #20]	; (80093f8 <CDC_Init_FS+0x20>)
 80093e2:	f7fe fe82 	bl	80080ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093e6:	4905      	ldr	r1, [pc, #20]	; (80093fc <CDC_Init_FS+0x24>)
 80093e8:	4803      	ldr	r0, [pc, #12]	; (80093f8 <CDC_Init_FS+0x20>)
 80093ea:	f7fe fe97 	bl	800811c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000d24 	.word	0x20000d24
 80093f8:	2000066c 	.word	0x2000066c
 80093fc:	2000093c 	.word	0x2000093c

08009400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009406:	4618      	mov	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
 800941c:	4613      	mov	r3, r2
 800941e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b23      	cmp	r3, #35	; 0x23
 8009424:	d84a      	bhi.n	80094bc <CDC_Control_FS+0xac>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <CDC_Control_FS+0x1c>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	080094bd 	.word	0x080094bd
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094bd 	.word	0x080094bd
 8009438:	080094bd 	.word	0x080094bd
 800943c:	080094bd 	.word	0x080094bd
 8009440:	080094bd 	.word	0x080094bd
 8009444:	080094bd 	.word	0x080094bd
 8009448:	080094bd 	.word	0x080094bd
 800944c:	080094bd 	.word	0x080094bd
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080094bd 	.word	0x080094bd
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080094bd 	.word	0x080094bd
 8009460:	080094bd 	.word	0x080094bd
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094bd 	.word	0x080094bd
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094bd 	.word	0x080094bd
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094bd 	.word	0x080094bd
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080094bd 	.word	0x080094bd
 8009484:	080094bd 	.word	0x080094bd
 8009488:	080094bd 	.word	0x080094bd
 800948c:	080094bd 	.word	0x080094bd
 8009490:	080094bd 	.word	0x080094bd
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094bd 	.word	0x080094bd
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	080094bd 	.word	0x080094bd
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094bd 	.word	0x080094bd
 80094b0:	080094bd 	.word	0x080094bd
 80094b4:	080094bd 	.word	0x080094bd
 80094b8:	080094bd 	.word	0x080094bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094bc:	bf00      	nop
  }

  return (USBD_OK);
 80094be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f7 faf3 	bl	8000ac4 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <CDC_Receive_FS+0x2c>)
 80094e2:	f7fe fe1b 	bl	800811c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094e6:	4804      	ldr	r0, [pc, #16]	; (80094f8 <CDC_Receive_FS+0x2c>)
 80094e8:	f7fe fe2c 	bl	8008144 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	2000066c 	.word	0x2000066c

080094fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800950e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
	...

08009520 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	6039      	str	r1, [r7, #0]
 800952a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2212      	movs	r2, #18
 8009530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009532:	4b03      	ldr	r3, [pc, #12]	; (8009540 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000158 	.word	0x20000158

08009544 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2204      	movs	r2, #4
 8009554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009556:	4b03      	ldr	r3, [pc, #12]	; (8009564 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	2000016c 	.word	0x2000016c

08009568 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4907      	ldr	r1, [pc, #28]	; (800959c <USBD_CDC_ProductStrDescriptor+0x34>)
 800957e:	4808      	ldr	r0, [pc, #32]	; (80095a0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009580:	f7ff fe19 	bl	80091b6 <USBD_GetString>
 8009584:	e004      	b.n	8009590 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4904      	ldr	r1, [pc, #16]	; (800959c <USBD_CDC_ProductStrDescriptor+0x34>)
 800958a:	4805      	ldr	r0, [pc, #20]	; (80095a0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800958c:	f7ff fe13 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	2000110c 	.word	0x2000110c
 80095a0:	08009d8c 	.word	0x08009d8c

080095a4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	4904      	ldr	r1, [pc, #16]	; (80095c4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80095b4:	4804      	ldr	r0, [pc, #16]	; (80095c8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80095b6:	f7ff fdfe 	bl	80091b6 <USBD_GetString>
  return USBD_StrDesc;
 80095ba:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	2000110c 	.word	0x2000110c
 80095c8:	08009da4 	.word	0x08009da4

080095cc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	6039      	str	r1, [r7, #0]
 80095d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	221a      	movs	r2, #26
 80095dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095de:	f000 f843 	bl	8009668 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80095e2:	4b02      	ldr	r3, [pc, #8]	; (80095ec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000170 	.word	0x20000170

080095f0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d105      	bne.n	800960e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009606:	4808      	ldr	r0, [pc, #32]	; (8009628 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009608:	f7ff fdd5 	bl	80091b6 <USBD_GetString>
 800960c:	e004      	b.n	8009618 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009612:	4805      	ldr	r0, [pc, #20]	; (8009628 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009614:	f7ff fdcf 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	2000110c 	.word	0x2000110c
 8009628:	08009db8 	.word	0x08009db8

0800962c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4907      	ldr	r1, [pc, #28]	; (8009660 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009642:	4808      	ldr	r0, [pc, #32]	; (8009664 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009644:	f7ff fdb7 	bl	80091b6 <USBD_GetString>
 8009648:	e004      	b.n	8009654 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4904      	ldr	r1, [pc, #16]	; (8009660 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800964e:	4805      	ldr	r0, [pc, #20]	; (8009664 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009650:	f7ff fdb1 	bl	80091b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000110c 	.word	0x2000110c
 8009664:	08009dc4 	.word	0x08009dc4

08009668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <Get_SerialNum+0x44>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <Get_SerialNum+0x48>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800967a:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <Get_SerialNum+0x4c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4413      	add	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d009      	beq.n	80096a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800968e:	2208      	movs	r2, #8
 8009690:	4909      	ldr	r1, [pc, #36]	; (80096b8 <Get_SerialNum+0x50>)
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 f814 	bl	80096c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009698:	2204      	movs	r2, #4
 800969a:	4908      	ldr	r1, [pc, #32]	; (80096bc <Get_SerialNum+0x54>)
 800969c:	68b8      	ldr	r0, [r7, #8]
 800969e:	f000 f80f 	bl	80096c0 <IntToUnicode>
  }
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	1fff7590 	.word	0x1fff7590
 80096b0:	1fff7594 	.word	0x1fff7594
 80096b4:	1fff7598 	.word	0x1fff7598
 80096b8:	20000172 	.word	0x20000172
 80096bc:	20000182 	.word	0x20000182

080096c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
 80096d6:	e027      	b.n	8009728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	0f1b      	lsrs	r3, r3, #28
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d80b      	bhi.n	80096f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	0f1b      	lsrs	r3, r3, #28
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	4619      	mov	r1, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	440b      	add	r3, r1
 80096f0:	3230      	adds	r2, #48	; 0x30
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]
 80096f6:	e00a      	b.n	800970e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	0f1b      	lsrs	r3, r3, #28
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4619      	mov	r1, r3
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	440b      	add	r3, r1
 8009708:	3237      	adds	r2, #55	; 0x37
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	3301      	adds	r3, #1
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	3301      	adds	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
 8009728:	7dfa      	ldrb	r2, [r7, #23]
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3d3      	bcc.n	80096d8 <IntToUnicode+0x18>
  }
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a0d      	ldr	r2, [pc, #52]	; (8009780 <HAL_PCD_MspInit+0x44>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d113      	bne.n	8009776 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800974e:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <HAL_PCD_MspInit+0x48>)
 8009750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009752:	4a0c      	ldr	r2, [pc, #48]	; (8009784 <HAL_PCD_MspInit+0x48>)
 8009754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009758:	6593      	str	r3, [r2, #88]	; 0x58
 800975a:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <HAL_PCD_MspInit+0x48>)
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	2014      	movs	r0, #20
 800976c:	f7f8 fb73 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009770:	2014      	movs	r0, #20
 8009772:	f7f8 fb8a 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40005c00 	.word	0x40005c00
 8009784:	40021000 	.word	0x40021000

08009788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fd9c 	bl	80082dc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	440b      	add	r3, r1
 80097cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	4619      	mov	r1, r3
 80097d6:	f7fe fdd4 	bl	8008382 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	440b      	add	r3, r1
 8009802:	333c      	adds	r3, #60	; 0x3c
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	4619      	mov	r1, r3
 800980a:	f7fe fe1d 	bl	8008448 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe ff21 	bl	800866c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800983a:	2301      	movs	r3, #1
 800983c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d001      	beq.n	800984a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009846:	f7f8 f817 	bl	8001878 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe fece 	bl	80085f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fe87 	bl	8008574 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fec9 	bl	8008616 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <HAL_PCD_SuspendCallback+0x30>)
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	4a03      	ldr	r2, [pc, #12]	; (80098a0 <HAL_PCD_SuspendCallback+0x30>)
 8009892:	f043 0306 	orr.w	r3, r3, #6
 8009896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	e000ed00 	.word	0xe000ed00

080098a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <HAL_PCD_ResumeCallback+0x34>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a07      	ldr	r2, [pc, #28]	; (80098d8 <HAL_PCD_ResumeCallback+0x34>)
 80098ba:	f023 0306 	bic.w	r3, r3, #6
 80098be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80098c0:	f000 f9fa 	bl	8009cb8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe feb8 	bl	8008640 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	e000ed00 	.word	0xe000ed00

080098dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80098e4:	4a2b      	ldr	r2, [pc, #172]	; (8009994 <USBD_LL_Init+0xb8>)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a29      	ldr	r2, [pc, #164]	; (8009994 <USBD_LL_Init+0xb8>)
 80098f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80098f4:	4b27      	ldr	r3, [pc, #156]	; (8009994 <USBD_LL_Init+0xb8>)
 80098f6:	4a28      	ldr	r2, [pc, #160]	; (8009998 <USBD_LL_Init+0xbc>)
 80098f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098fa:	4b26      	ldr	r3, [pc, #152]	; (8009994 <USBD_LL_Init+0xb8>)
 80098fc:	2208      	movs	r2, #8
 80098fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009900:	4b24      	ldr	r3, [pc, #144]	; (8009994 <USBD_LL_Init+0xb8>)
 8009902:	2202      	movs	r2, #2
 8009904:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009906:	4b23      	ldr	r3, [pc, #140]	; (8009994 <USBD_LL_Init+0xb8>)
 8009908:	2202      	movs	r2, #2
 800990a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800990c:	4b21      	ldr	r3, [pc, #132]	; (8009994 <USBD_LL_Init+0xb8>)
 800990e:	2200      	movs	r2, #0
 8009910:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009912:	4b20      	ldr	r3, [pc, #128]	; (8009994 <USBD_LL_Init+0xb8>)
 8009914:	2200      	movs	r2, #0
 8009916:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009918:	4b1e      	ldr	r3, [pc, #120]	; (8009994 <USBD_LL_Init+0xb8>)
 800991a:	2200      	movs	r2, #0
 800991c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800991e:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <USBD_LL_Init+0xb8>)
 8009920:	2200      	movs	r2, #0
 8009922:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009924:	481b      	ldr	r0, [pc, #108]	; (8009994 <USBD_LL_Init+0xb8>)
 8009926:	f7f8 fca0 	bl	800226a <HAL_PCD_Init>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009930:	f7f7 ffa2 	bl	8001878 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800993a:	2318      	movs	r3, #24
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	f7f9 ff8e 	bl	8003860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800994a:	2358      	movs	r3, #88	; 0x58
 800994c:	2200      	movs	r2, #0
 800994e:	2180      	movs	r1, #128	; 0x80
 8009950:	f7f9 ff86 	bl	8003860 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800995a:	23c0      	movs	r3, #192	; 0xc0
 800995c:	2200      	movs	r2, #0
 800995e:	2181      	movs	r1, #129	; 0x81
 8009960:	f7f9 ff7e 	bl	8003860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800996a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800996e:	2200      	movs	r2, #0
 8009970:	2101      	movs	r1, #1
 8009972:	f7f9 ff75 	bl	8003860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800997c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009980:	2200      	movs	r2, #0
 8009982:	2182      	movs	r1, #130	; 0x82
 8009984:	f7f9 ff6c 	bl	8003860 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	2000130c 	.word	0x2000130c
 8009998:	40005c00 	.word	0x40005c00

0800999c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f8 fd3e 	bl	8002434 <HAL_PCD_Start>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f980 	bl	8009cc4 <USBD_Get_USB_Status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	461a      	mov	r2, r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	70fb      	strb	r3, [r7, #3]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70bb      	strb	r3, [r7, #2]
 80099e8:	4613      	mov	r3, r2
 80099ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099fa:	78bb      	ldrb	r3, [r7, #2]
 80099fc:	883a      	ldrh	r2, [r7, #0]
 80099fe:	78f9      	ldrb	r1, [r7, #3]
 8009a00:	f7f8 fead 	bl	800275e <HAL_PCD_EP_Open>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 f95a 	bl	8009cc4 <USBD_Get_USB_Status>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f8 fef4 	bl	800282a <HAL_PCD_EP_Close>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f93b 	bl	8009cc4 <USBD_Get_USB_Status>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7f8 ffb5 	bl	80029ea <HAL_PCD_EP_SetStall>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f91c 	bl	8009cc4 <USBD_Get_USB_Status>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7f8 fff6 	bl	8002aaa <HAL_PCD_EP_ClrStall>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 f8fd 	bl	8009cc4 <USBD_Get_USB_Status>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da0c      	bge.n	8009b0e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	00db      	lsls	r3, r3, #3
 8009b06:	440b      	add	r3, r1
 8009b08:	3302      	adds	r3, #2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	e00b      	b.n	8009b26 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b14:	68f9      	ldr	r1, [r7, #12]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	440b      	add	r3, r1
 8009b20:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b24:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7f8 fddf 	bl	8002714 <HAL_PCD_SetAddress>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 f8b1 	bl	8009cc4 <USBD_Get_USB_Status>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b8e:	7af9      	ldrb	r1, [r7, #11]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	f7f8 fee6 	bl	8002964 <HAL_PCD_EP_Transmit>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f890 	bl	8009cc4 <USBD_Get_USB_Status>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ba8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b086      	sub	sp, #24
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bd0:	7af9      	ldrb	r1, [r7, #11]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	f7f8 fe70 	bl	80028ba <HAL_PCD_EP_Receive>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 f86f 	bl	8009cc4 <USBD_Get_USB_Status>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f8 fe92 	bl	8002934 <HAL_PCD_EP_GetRxCount>
 8009c10:	4603      	mov	r3, r0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <HAL_PCDEx_LPM_Callback+0x18>
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d013      	beq.n	8009c5a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009c32:	e023      	b.n	8009c7c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d007      	beq.n	8009c4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009c3c:	f000 f83c 	bl	8009cb8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c40:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	4a0f      	ldr	r2, [pc, #60]	; (8009c84 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c46:	f023 0306 	bic.w	r3, r3, #6
 8009c4a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fcf4 	bl	8008640 <USBD_LL_Resume>
    break;
 8009c58:	e010      	b.n	8009c7c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe fcd8 	bl	8008616 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c6e:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c74:	f043 0306 	orr.w	r3, r3, #6
 8009c78:	6113      	str	r3, [r2, #16]
    break;
 8009c7a:	bf00      	nop
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000ed00 	.word	0xe000ed00

08009c88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c90:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <USBD_static_malloc+0x18>)
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	200001b4 	.word	0x200001b4

08009ca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009cbc:	f7f7 fa98 	bl	80011f0 <SystemClock_Config>
}
 8009cc0:	bf00      	nop
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d817      	bhi.n	8009d08 <USBD_Get_USB_Status+0x44>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <USBD_Get_USB_Status+0x1c>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009cf1 	.word	0x08009cf1
 8009ce4:	08009cf7 	.word	0x08009cf7
 8009ce8:	08009cfd 	.word	0x08009cfd
 8009cec:	08009d03 	.word	0x08009d03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf4:	e00b      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfa:	e008      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009d00:	e005      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d02:	2303      	movs	r3, #3
 8009d04:	73fb      	strb	r3, [r7, #15]
    break;
 8009d06:	e002      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0c:	bf00      	nop
  }
  return usb_status;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4e0d      	ldr	r6, [pc, #52]	; (8009d54 <__libc_init_array+0x38>)
 8009d20:	4c0d      	ldr	r4, [pc, #52]	; (8009d58 <__libc_init_array+0x3c>)
 8009d22:	1ba4      	subs	r4, r4, r6
 8009d24:	10a4      	asrs	r4, r4, #2
 8009d26:	2500      	movs	r5, #0
 8009d28:	42a5      	cmp	r5, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	4e0b      	ldr	r6, [pc, #44]	; (8009d5c <__libc_init_array+0x40>)
 8009d2e:	4c0c      	ldr	r4, [pc, #48]	; (8009d60 <__libc_init_array+0x44>)
 8009d30:	f000 f820 	bl	8009d74 <_init>
 8009d34:	1ba4      	subs	r4, r4, r6
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	2500      	movs	r5, #0
 8009d3a:	42a5      	cmp	r5, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d44:	4798      	blx	r3
 8009d46:	3501      	adds	r5, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d4e:	4798      	blx	r3
 8009d50:	3501      	adds	r5, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	08009de4 	.word	0x08009de4
 8009d58:	08009de4 	.word	0x08009de4
 8009d5c:	08009de4 	.word	0x08009de4
 8009d60:	08009de8 	.word	0x08009de8

08009d64 <memset>:
 8009d64:	4402      	add	r2, r0
 8009d66:	4603      	mov	r3, r0
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d100      	bne.n	8009d6e <memset+0xa>
 8009d6c:	4770      	bx	lr
 8009d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d72:	e7f9      	b.n	8009d68 <memset+0x4>

08009d74 <_init>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr

08009d80 <_fini>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr
